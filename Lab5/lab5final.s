        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      reset_isr ; Reset               ; Int 08h (IRQ 0)
        dd      tick_isr ; Tick                ; Int 09h (IRQ 1)
        dd      keyboard_isr ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

reset_isr:
	call resetInterruptHandler

tick_isr:
	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push bp
	push es
	push ds

	call YKEnterISR

	sti 		; enable interrupts
	call tickInterruptHandler
	cli			; disable interrupts
	
	; send EOI command to PIC
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)

	call YKExitISR

	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	iret

keyboard_isr:
	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push bp
	push es
	push ds

	call YKEnterISR

	sti 		; enable interrupts
	call keyboardInterruptHandler
	cli			; disable interrupts
	
	; send EOI command to PIC
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)

	call YKExitISR

	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	iret


; Generated by c86 (BYU-NASM) 5.1 (beta) from interruptHandlers.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_interruptHandlers_2:
	DW	0
	ALIGN	2
resetInterruptHandler:
	; >>>>> Line:	8
	; >>>>> { 
	jmp	L_interruptHandlers_3
L_interruptHandlers_4:
	; >>>>> Line:	9
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_interruptHandlers_3:
	push	bp
	mov	bp, sp
	jmp	L_interruptHandlers_4
L_interruptHandlers_6:
	DB	"TICK ",0
	ALIGN	2
tickInterruptHandler:
	; >>>>> Line:	13
	; >>>>> { 
	jmp	L_interruptHandlers_7
L_interruptHandlers_8:
	; >>>>> Line:	14
	; >>>>> tickCount++; 
	inc	word [L_interruptHandlers_2]
	; >>>>> Line:	15
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	16
	; >>>>> printString("TICK "); 
	mov	ax, L_interruptHandlers_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	17
	; >>>>> printInt(tickCount); 
	push	word [L_interruptHandlers_2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	18
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	20
	; >>>>> YKTickHandler(); 
	call	YKTickHandler
	mov	sp, bp
	pop	bp
	ret
L_interruptHandlers_7:
	push	bp
	mov	bp, sp
	jmp	L_interruptHandlers_8
L_interruptHandlers_13:
	DB	") IGNORED",0
L_interruptHandlers_12:
	DB	"KEYPRESS (",0
L_interruptHandlers_11:
	DB	"DELAY COMPLETE",0
L_interruptHandlers_10:
	DB	"DELAY KEY PRESSED",0
	ALIGN	2
keyboardInterruptHandler:
	; >>>>> Line:	24
	; >>>>> { 
	jmp	L_interruptHandlers_14
L_interruptHandlers_15:
	; >>>>> Line:	26
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	27
	; >>>>> if (KeyBuffer == 'd') 
	cmp	word [KeyBuffer], 100
	jne	L_interruptHandlers_16
	; >>>>> Line:	29
	; >>>>> printString("DEL 
	mov	ax, L_interruptHandlers_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	30
	; >>>>> count = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	31
	; >>>>> while (count < 5000) 
	jmp	L_interruptHandlers_18
L_interruptHandlers_17:
	; >>>>> Line:	33
	; >>>>> count++; 
	inc	word [bp-2]
L_interruptHandlers_18:
	cmp	word [bp-2], 5000
	jl	L_interruptHandlers_17
L_interruptHandlers_19:
	; >>>>> Line:	35
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	36
	; >>>>> printString("DELAY COMPLETE"); 
	mov	ax, L_interruptHandlers_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_interruptHandlers_20
L_interruptHandlers_16:
	; >>>>> Line:	41
	; >>>>> printString("KEYPRESS ("); 
	mov	ax, L_interruptHandlers_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	42
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	43
	; >>>>> printString(") IGNORED"); 
	mov	ax, L_interruptHandlers_13
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	44
	; >>>>> printNewLine(); 
	call	printNewLine
L_interruptHandlers_20:
	mov	sp, bp
	pop	bp
	ret
L_interruptHandlers_14:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_interruptHandlers_15
	ALIGN	2
L_interruptHandlers_1:
	TIMES	512 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from linkedList.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_linkedList_1:
	DW	0
	ALIGN	2
createTCB:
	; >>>>> Line:	14
	; >>>>> { 
	jmp	L_linkedList_2
L_linkedList_3:
	; >>>>> Line:	15
	; >>>>> TCBarray[currentListSize].stackptr = stackptr; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 40
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 26
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	16
	; >>>>> TCBarray[currentListSize].priority = priority; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 40
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 28
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	17
	; >>>>> TCBarray[currentListSize].context = context; 
	lea	ax, [bp+8]
	mov	word [bp-2], ax
	mov	ax, word [L_linkedList_1]
	mov	cx, 40
	imul	cx
	add	ax, TCBarray
	mov	word [bp-4], ax
	mov	di, word [bp-4]
	mov	si, word [bp-2]
	mov	cx, 13
	rep
	movsw
	; >>>>> Line:	18
	; >>>>> TCBarray[currentListSize].ID = currentListSize; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 40
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 36
	mov	ax, word [L_linkedList_1]
	mov	word [si], ax
	; >>>>> Line:	19
	; >>>>> TCBarray[currentListSize].pendingSem = 0; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 40
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 38
	mov	word [si], 0
	; >>>>> Line:	20
	; >>>>> currentListSize++; 
	inc	word [L_linkedList_1]
	; >>>>> Line:	21
	; >>>>> return &(TCBarray[currentListSize-1]); 
	mov	ax, word [L_linkedList_1]
	dec	ax
	mov	cx, 40
	imul	cx
	add	ax, TCBarray
L_linkedList_4:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_2:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_linkedList_3
	ALIGN	2
insertTCBIntoRdyList:
	; >>>>> Line:	25
	; >>>>> { 
	jmp	L_linkedList_6
L_linkedList_7:
	; >>>>> Line:	27
	; >>>>> if (YKRdyList == 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_linkedList_8
	; >>>>> Line:	29
	; >>>>> YKRdyList = tcb; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	; >>>>> Line:	30
	; >>>>> tcb->next =  
	mov	si, word [bp+4]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	31
	; >>>>> tcb->prev = 0; 
	mov	si, word [bp+4]
	add	si, 34
	mov	word [si], 0
	jmp	L_linkedList_9
L_linkedList_8:
	; >>>>> Line:	35
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	36
	; >>>>> while (tmp->priority < tcb->priority) 
	jmp	L_linkedList_11
L_linkedList_10:
	; >>>>> Line:	37
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_11:
	mov	si, word [bp-2]
	add	si, 28
	mov	di, word [bp+4]
	add	di, 28
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_linkedList_10
L_linkedList_12:
	; >>>>> Line:	38
	; >>>>> if (tmp->prev == 0) 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_13
	; >>>>> Line:	40
	; >>>>> YKRdyList = tcb; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	jmp	L_linkedList_14
L_linkedList_13:
	; >>>>> Line:	48
	; >>>>> tmp->prev->next = tcb; 
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_14:
	; >>>>> Line:	49
	; >>>>> tcb->prev = tmp->prev; 
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	50
	; >>>>> tcb->next = tmp; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	51
	; >>>>> tmp->prev = tcb; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_9:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_6:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_7
	ALIGN	2
removeFirstTCBFromRdyList:
	; >>>>> Line:	56
	; >>>>> { 
	jmp	L_linkedList_16
L_linkedList_17:
	; >>>>> Line:	58
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	59
	; >>>>> YKRdyList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	60
	; >>>>> tmp->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 32
	mov	si, word [si]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	61
	; >>>>> tmp->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	62
	; >>>>> YKSuspList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	63
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	64
	; >>>>> if (tmp->next != 0) 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	je	L_linkedList_18
	; >>>>> Line:	65
	; >>>>> tmp->next->prev = tmp; 
	mov	si, word [bp-2]
	add	si, 32
	mov	si, word [si]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
L_linkedList_18:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_17
	ALIGN	2
moveTCBToRdyList:
	; >>>>> Line:	72
	; >>>>> { 
	jmp	L_linkedList_20
L_linkedList_21:
	; >>>>> Line:	75
	; >>>>> if (tmp->prev == 0) 
	mov	si, word [bp+4]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_22
	; >>>>> Line:	76
	; >>>>> YKSuspList = tmp->next; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [si]
	mov	word [YKSuspList], ax
	jmp	L_linkedList_23
L_linkedList_22:
	; >>>>> Line:	78
	; >>>>> tmp->prev->next = tmp->next; 
	mov	si, word [bp+4]
	add	si, 32
	mov	di, word [bp+4]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
L_linkedList_23:
	; >>>>> Line:	79
	; >>>>> if (tmp->next != 0) 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	je	L_linkedList_24
	; >>>>> Line:	80
	; >>>>> tmp->next->prev = tmp->prev; 
	mov	si, word [bp+4]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_linkedList_24:
	; >>>>> Line:	82
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	84
	; >>>>> while (tmp2->priority < tmp->priority) 
	jmp	L_linkedList_26
L_linkedList_25:
	; >>>>> Line:	85
	; >>>>> tmp2 = tmp2->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_26:
	mov	si, word [bp-2]
	add	si, 28
	mov	di, word [bp+4]
	add	di, 28
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_linkedList_25
L_linkedList_27:
	; >>>>> Line:	86
	; >>>>> if (tmp2->prev == 0) 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_28
	; >>>>> Line:	87
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	jmp	L_linkedList_29
L_linkedList_28:
	; >>>>> Line:	89
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_29:
	; >>>>> Line:	90
	; >>>>> tmp->prev = tmp2->prev; 
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	91
	; >>>>> tmp->next = tmp2; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	92
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp+4]
	mov	word [si], ax
	mov	sp, bp
	pop	bp
	ret
L_linkedList_20:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_21
L_linkedList_43:
	DB	0xA,0xA,0
L_linkedList_42:
	DB	0xA,"  flags: ",0
L_linkedList_41:
	DB	0xA,"  ds: ",0
L_linkedList_40:
	DB	0xA,"  es: ",0
L_linkedList_39:
	DB	0xA,"  bp: ",0
L_linkedList_38:
	DB	0xA,"  di: ",0
L_linkedList_37:
	DB	0xA,"  si: ",0
L_linkedList_36:
	DB	0xA,"  dx: ",0
L_linkedList_35:
	DB	0xA,"  cx: ",0
L_linkedList_34:
	DB	0xA,"  bx: ",0
L_linkedList_33:
	DB	0xA,"  ax: ",0
L_linkedList_32:
	DB	0xA,"  ip: ",0
L_linkedList_31:
	DB	0xA,"  sp: ",0
	ALIGN	2
printContext:
	; >>>>> Line:	98
	; >>>>> { 
	jmp	L_linkedList_44
L_linkedList_45:
	; >>>>> Line:	99
	; >>>>> printString("\n  sp: "); 
	mov	ax, L_linkedList_31
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	100
	; >>>>>  
	push	word [bp+4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	101
	; >>>>> printString("\n  ip: "); 
	mov	ax, L_linkedList_32
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	102
	; >>>>> printInt(c.ip); 
	push	word [bp+6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	116
	; >>>>> printString("\n  ax: "); 
	mov	ax, L_linkedList_33
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	117
	; >>>>> printInt(c.ax); 
	push	word [bp+8]
	call	printInt
	add	sp, 2
	; >>>>> Line:	118
	; >>>>> printString("\n  bx: "); 
	mov	ax, L_linkedList_34
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	119
	; >>>>> printInt(c.bx); 
	push	word [bp+10]
	call	printInt
	add	sp, 2
	; >>>>> Line:	120
	; >>>>> printString("\n  cx: "); 
	mov	ax, L_linkedList_35
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	121
	; >>>>> printInt(c.cx); 
	push	word [bp+12]
	call	printInt
	add	sp, 2
	; >>>>> Line:	122
	; >>>>> printString("\n  dx: "); 
	mov	ax, L_linkedList_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	123
	; >>>>> printInt(c.dx); 
	push	word [bp+14]
	call	printInt
	add	sp, 2
	; >>>>> Line:	124
	; >>>>> printString("\n  si: "); 
	mov	ax, L_linkedList_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	125
	; >>>>> printInt(c.si); 
	push	word [bp+16]
	call	printInt
	add	sp, 2
	; >>>>> Line:	126
	; >>>>> printString("\n  di: "); 
	mov	ax, L_linkedList_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	127
	; >>>>> printInt(c.di); 
	push	word [bp+18]
	call	printInt
	add	sp, 2
	; >>>>> Line:	128
	; >>>>> printString("\n  bp: "); 
	mov	ax, L_linkedList_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	129
	; >>>>> printInt(c.bp); 
	push	word [bp+20]
	call	printInt
	add	sp, 2
	; >>>>> Line:	130
	; >>>>> printString("\n  es: "); 
	mov	ax, L_linkedList_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printInt(c.es); 
	push	word [bp+22]
	call	printInt
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> printString("\n  ds: "); 
	mov	ax, L_linkedList_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	133
	; >>>>> printInt(c.ds); 
	push	word [bp+24]
	call	printInt
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> printString("\n  flags: "); 
	mov	ax, L_linkedList_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printInt(c.flag 
	push	word [bp+28]
	call	printInt
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> printString("\n\n"); 
	mov	ax, L_linkedList_43
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_linkedList_44:
	push	bp
	mov	bp, sp
	jmp	L_linkedList_45
L_linkedList_49:
	DB	0xA,"  Delay: ",0
L_linkedList_48:
	DB	0xA,"  Priority: ",0
L_linkedList_47:
	DB	"  ID: ",0
	ALIGN	2
printTCB:
	; >>>>> Line:	141
	; >>>>> { 
	jmp	L_linkedList_50
L_linkedList_51:
	; >>>>> Line:	142
	; >>>>> printString("  ID: "); 
	mov	ax, L_linkedList_47
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	143
	; >>>>> printInt(t->ID); 
	mov	si, word [bp+4]
	add	si, 36
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	144
	; >>>>> printString("\n  Priority: "); 
	mov	ax, L_linkedList_48
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	145
	; >>>>> printInt(t->priority); 
	mov	si, word [bp+4]
	add	si, 28
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	146
	; >>>>> printString("\n  Delay: "); 
	mov	ax, L_linkedList_49
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	147
	; >>>>> printInt(t->delay); 
	mov	si, word [bp+4]
	add	si, 30
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	148
	; >>>>> printContext(t->context); 
	sub	sp, 26
	mov	di, sp
	mov	si, word [bp+4]
	mov	cx, 13
	rep
	movsw
	call	printContext
	add	sp, 26
	mov	sp, bp
	pop	bp
	ret
L_linkedList_50:
	push	bp
	mov	bp, sp
	jmp	L_linkedList_51
L_linkedList_53:
	DB	"TCB ",0
	ALIGN	2
printTCBs:
	; >>>>> Line:	152
	; >>>>> { 
	jmp	L_linkedList_54
L_linkedList_55:
	; >>>>> Line:	154
	; >>>>> for (i = 0; i < currentListSize; i++) 
	mov	word [bp-2], 0
	jmp	L_linkedList_57
L_linkedList_56:
	; >>>>> Line:	156
	; >>>>> printString("TCB "); 
	mov	ax, L_linkedList_53
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	157
	; >>>>> printInt(i); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	158
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	159
	; >>>>> printTCB(&TCBarray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 40
	imul	cx
	add	ax, TCBarray
	push	ax
	call	printTCB
	add	sp, 2
L_linkedList_59:
	inc	word [bp-2]
L_linkedList_57:
	mov	ax, word [L_linkedList_1]
	cmp	ax, word [bp-2]
	ja	L_linkedList_56
L_linkedList_58:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_54:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_55
L_linkedList_62:
	DB	"Suspended list: ",0xA,0
L_linkedList_61:
	DB	"Ready list: ",0xA,0
	ALIGN	2
printLists:
	; >>>>> Line:	163
	; >>>>> { 
	jmp	L_linkedList_63
L_linkedList_64:
	; >>>>> Line:	166
	; >>>>> printString("Ready list: \n"); 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	166
	; >>>>> printString("Ready list: \n"); 
	mov	ax, L_linkedList_61
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	167
	; >>>>> while (tmp != 0) 
	jmp	L_linkedList_66
L_linkedList_65:
	; >>>>> Line:	169
	; >>>>> printTCB(tmp); 
	push	word [bp-2]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	170
	; >>>>>  
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_66:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_linkedList_65
L_linkedList_67:
	; >>>>> Line:	174
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	175
	; >>>>> printString("Suspended list: \n"); 
	mov	ax, L_linkedList_62
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	176
	; >>>>> while (tmp != 0) 
	jmp	L_linkedList_69
L_linkedList_68:
	; >>>>> Line:	178
	; >>>>> printTCB(tmp); 
	push	word [bp-2]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	179
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_69:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_linkedList_68
L_linkedList_70:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_63:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_64
	ALIGN	2
YKRdyList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
TCBarray:
	TIMES	240 db 0
runningTask:
	TIMES	2 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleCount:
	DW	0
running_flag:
	DW	0
ISRCallDepth:
	DW	0
lastRunTask:
	DW	0
YKCtxSwCount:
	DW	0
YKTickNum:
	DW	0
firstTime:
	DW	1
currentNumSemaphores:
	DW	0
initContext:
	DW	0,0,0,0,0
	DW	0,0,0,0,0
	DW	0,0,512
L_yakc_2:
	DB	0xA,"************* BEGIN ***************",0xA,0xA,0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	34
	; >>>>> { 
	jmp	L_yakc_3
L_yakc_4:
	; >>>>> Line:	35
	; >>>>> TCB->context.i 
	mov	ax, L_yakc_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	40
	; >>>>> YKNewTask(YKIdleTask, (void *) &IdleStk[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (L_yakc_1+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	42
	; >>>>> lastRunTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [lastRunTask], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_3:
	push	bp
	mov	bp, sp
	jmp	L_yakc_4
L_yakc_6:
	DB	"Entering idle task",0xA,0xD,0
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	46
	; >>>>> { 
	jmp	L_yakc_7
L_yakc_8:
	; >>>>> Line:	47
	; >>>>> printString("Entering idle task\n\r"); 
	mov	ax, L_yakc_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> while(1) 
	jmp	L_yakc_10
L_yakc_9:
	; >>>>> Line:	51
	; >>>>> tmp = YKIdleCount + 1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [bp-2], ax
	; >>>>> Line:	52
	; >>>>> YKIdleCount = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKIdleCount], ax
L_yakc_10:
	jmp	L_yakc_9
L_yakc_11:
	mov	sp, bp
	pop	bp
	ret
L_yakc_7:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_8
	ALIGN	2
YKNewTask:
	; >>>>> Line:	62
	; >>>>> { 
	jmp	L_yakc_13
L_yakc_14:
	; >>>>> Line:	70
	; >>>>> newTCB = createTCB(taskStack, priority, initContext); 
	sub	sp, 26
	mov	di, sp
	mov	si, initContext
	mov	cx, 13
	rep
	movsw
	mov	al, byte [bp+8]
	xor	ah, ah
	push	ax
	push	word [bp+6]
	call	createTCB
	add	sp, 30
	mov	word [bp-2], ax
	; >>>>> Line:	72
	; >>>>> newTCB->context.sp = (int)(taskStack); 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	73
	; >>>>> newTCB->context.i 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	74
	; >>>>> newTCB->context.bp = (int)taskStack; 
	mov	si, word [bp-2]
	add	si, 16
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	75
	; >>>>> insertTCBIntoRdyList(newTCB); 
	push	word [bp-2]
	call	insertTCBIntoRdyList
	add	sp, 2
	; >>>>> Line:	79
	; >>>>> if (running_flag) 
	mov	ax, word [running_flag]
	test	ax, ax
	je	L_yakc_15
	; >>>>> Line:	81
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_15:
	mov	sp, bp
	pop	bp
	ret
L_yakc_13:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_14
	ALIGN	2
YKRun:
	; >>>>> Line:	86
	; >>>>> { 
	jmp	L_yakc_17
L_yakc_18:
	; >>>>> Line:	89
	; >>>>> running_flag = 1; 
	mov	word [running_flag], 1
	; >>>>> Line:	92
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_17:
	push	bp
	mov	bp, sp
	jmp	L_yakc_18
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	96
	; >>>>> { 
	jmp	L_yakc_20
L_yakc_21:
	; >>>>> Line:	101
	; >>>>> if (count == 0) 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_22
	; >>>>> Line:	102
	; >>>>> return; 
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	107
	; >>>>> YKRdyList->delay = count; 
	mov	si, word [YKRdyList]
	add	si, 30
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	108
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	112
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_23:
	mov	sp, bp
	pop	bp
	ret
L_yakc_20:
	push	bp
	mov	bp, sp
	jmp	L_yakc_21
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	116
	; >>>>> { 
	jmp	L_yakc_25
L_yakc_26:
	; >>>>> Line:	118
	; >>>>> ISRCallDepth++; 
	inc	word [ISRCallDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_25:
	push	bp
	mov	bp, sp
	jmp	L_yakc_26
	ALIGN	2
YKExitISR:
	; >>>>> Line:	122
	; >>>>> { 
	jmp	L_yakc_28
L_yakc_29:
	; >>>>> Line:	124
	; >>>>> ISRCallDepth--; 
	dec	word [ISRCallDepth]
	; >>>>> Line:	125
	; >>>>> if (ISRCallDepth == 0) 
	mov	ax, word [ISRCallDepth]
	test	ax, ax
	jne	L_yakc_30
	; >>>>> Line:	126
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_30:
	mov	sp, bp
	pop	bp
	ret
L_yakc_28:
	push	bp
	mov	bp, sp
	jmp	L_yakc_29
	ALIGN	2
YKScheduler:
	; >>>>> Line:	130
	; >>>>> { 
	jmp	L_yakc_32
L_yakc_33:
	; >>>>> Line:	135
	; >>>>> lse 
	call	YKEnterMutex
	; >>>>> Line:	136
	; >>>>> if (firstTime) 
	mov	ax, word [firstTime]
	test	ax, ax
	je	L_yakc_34
	; >>>>> Line:	138
	; >>>>> firstTime = 0; 
	mov	word [firstTime], 0
	; >>>>> Line:	140
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	142
	; >>>>> YKFirstDispatcher(); 
	call	YKFirstDispatcher
	jmp	L_yakc_35
L_yakc_34:
	; >>>>> Line:	144
	; >>>>> else if (lastRunTask != YKRdyList) 
	mov	ax, word [YKRdyList]
	cmp	ax, word [lastRunTask]
	je	L_yakc_36
	; >>>>> Line:	147
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	149
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
L_yakc_36:
L_yakc_35:
	mov	sp, bp
	pop	bp
	ret
L_yakc_32:
	push	bp
	mov	bp, sp
	jmp	L_yakc_33
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	155
	; >>>>> { 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	164
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	169
	; >>>>> printString("\n"); 
	mov	ax, (L_yakc_2+37)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	171
	; >>>>> while(tmp != 0) 
	jmp	L_yakc_41
L_yakc_40:
	; >>>>> Line:	173
	; >>>>> if (tmp->delay > 0) 
	mov	si, word [bp-2]
	add	si, 30
	cmp	word [si], 0
	jle	L_yakc_43
	; >>>>> Line:	175
	; >>>>> (tmp->delay)--; 
	mov	si, word [bp-2]
	add	si, 30
	dec	word [si]
	; >>>>> Line:	176
	; >>>>> if (tmp->delay == 0) 
	mov	si, word [bp-2]
	add	si, 30
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_44
	; >>>>> Line:	178
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	179
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	181
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-4]
	call	moveTCBToRdyList
	add	sp, 2
	jmp	L_yakc_45
L_yakc_44:
	; >>>>> Line:	184
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_45:
	jmp	L_yakc_46
L_yakc_43:
	; >>>>> Line:	187
	; >>>>> tmp = tmp->n 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_46:
L_yakc_41:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_40
L_yakc_42:
	; >>>>> Line:	189
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	192
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_39
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	196
	; >>>>> { 
	jmp	L_yakc_48
L_yakc_49:
	; >>>>> Line:	199
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	200
	; >>>>> sem = &(SemArray[currentNumSemaphores]); 
	mov	ax, word [currentNumSemaphores]
	shl	ax, 1
	add	ax, SemArray
	mov	word [bp-2], ax
	; >>>>> Line:	201
	; >>>>> sem->value = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	203
	; >>>>> currentNumSemaphores++; 
	inc	word [currentNumSemaphores]
	; >>>>> Line:	204
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	205
	; >>>>> return sem; 
	mov	ax, word [bp-2]
L_yakc_50:
	mov	sp, bp
	pop	bp
	ret
L_yakc_48:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_49
	ALIGN	2
YKSemPend:
	; >>>>> Line:	211
	; >>>>> { 
	jmp	L_yakc_52
L_yakc_53:
	; >>>>> Line:	217
	; >>>>> if (semaphore->value > 0) 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jle	L_yakc_54
	; >>>>> Line:	220
	; >>>>> (semaphore->value)--; 
	dec	word [si]
	jmp	L_yakc_55
L_yakc_54:
	; >>>>> Line:	226
	; >>>>> (semaphore->value)--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	227
	; >>>>> YKRdyList->pendingSem = semaphore; 
	mov	si, word [YKRdyList]
	add	si, 38
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	229
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	231
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_55:
	mov	sp, bp
	pop	bp
	ret
L_yakc_52:
	push	bp
	mov	bp, sp
	jmp	L_yakc_53
	ALIGN	2
YKSemPost:
	; >>>>> Line:	237
	; >>>>> { 
	jmp	L_yakc_57
L_yakc_58:
	; >>>>> Line:	245
	; >>>>> (semaphore->value)++; 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	257
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	258
	; >>>>> while(tmp != 0) 
	jmp	L_yakc_60
L_yakc_59:
	; >>>>> Line:	261
	; >>>>> if (tmp->pendingSem == semaphore){ 
	mov	si, word [bp-2]
	add	si, 38
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_62
	; >>>>> Line:	262
	; >>>>> tmp->pendingSem = 0; 
	mov	si, word [bp-2]
	add	si, 38
	mov	word [si], 0
	; >>>>> Line:	266
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	267
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	268
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-4]
	call	moveTCBToRdyList
	add	sp, 2
	jmp	L_yakc_63
L_yakc_62:
	; >>>>> Line:	272
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_63:
L_yakc_60:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_59
L_yakc_61:
	; >>>>> Line:	278
	; >>>>> if (ISRCallDepth <= 1) 
	cmp	word [ISRCallDepth], 1
	ja	L_yakc_64
	; >>>>> Line:	282
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_64:
	mov	sp, bp
	pop	bp
	ret
L_yakc_57:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_58
	ALIGN	2
L_yakc_1:
	TIMES	512 db 0
SemArray:
	TIMES	12 db 0
YKEnterMutex:
  cli
  ret

YKExitMutex:
  sti
  ret

YKDispatcher:
  ;save context of current task into its TCB
  ;restore context of new task into registers
  ;restore ip of new task, which will send us to the new task


  ;cli     ;disable interrupts

  push bp
  push bx

  mov bx, [lastRunTask]

  mov [bx+4], ax
  mov [bx+8], cx
  mov [bx+10], dx

  mov [bx], sp
  mov [bx+12], si
  mov [bx+14], di


  mov [bx+18], es
  mov [bx+20], ds
  mov [bx+22], cs

  mov bp, bx
  pop bx
  mov [bp+6], bx
  mov bx, bp
  pop bp
  mov [bx+16], bp

  pushf
  pop ax
  mov [bx+24], ax

  pop ax
  mov [bx+2], ax ;this is the ip


  ;assign lastRunTask to the value of YKRdyList
  mov ax, [YKRdyList]
  mov [lastRunTask], ax

  ;restore the context of the new task into the registers
  ;this new task is at the top of YKRdyList

  mov bx, word[YKRdyList]

  mov sp, word [bx] ;sp
  mov ax, word[bx+4]
  mov cx, word[bx+8]
  mov dx, word[bx+10]

  mov di, word[bx+14]
  mov bp, word[bx+16]
  mov es, word[bx+18]
  mov ds, word[bx+20]


  mov si, [bx+24]
  push si                 ;pushes flags to the stack
  mov si, [bx+22]
  push si                 ;pushes cs to the stack
  mov si, [bx+2]
  push si                 ;pushes the ip onto the stack

  mov si, word[bx+12]
  mov bx, word[bx+6]
  sti
  iret  ;return using iret



;YKFirstDispatcher(): dispatches when you dont need to save context
; i.e. when YKRun calls the scheduler

YKFirstDispatcher:
  
  ;cli ;disable interrupts  

  ;assign lastRunTask to the value of YKRdyList
  mov ax, [YKRdyList]
  mov [lastRunTask], ax

  ;restore the context of the new task into the registers
  ;this new task is at the top of YKRdyList

  mov bx, word[YKRdyList]

  mov sp, word [bx] ;sp
  mov ax, word[bx+4]
  mov cx, word[bx+8]
  mov dx, word[bx+10]

  mov di, word[bx+14]
  mov bp, word[bx+16]
  mov es, word[bx+18]
  mov ds, word[bx+20]


  mov si, [bx+24]
  push si                 ;pushes flags to the stack
  mov si, [bx+22]
  push si                 ;pushes cs to the stack
  mov si, [bx+2]
  push si                 ;pushes the ip onto the stack

  mov si, word[bx+12]
  mov bx, word[bx+6]
  ;sti                   ;do we need to enable interrupts when the flags will essentially do that?
  iret  ;return using iret; Generated by c86 (BYU-NASM) 5.1 (beta) from lab5app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab5app_4:
	DB	"works",0
L_lab5app_3:
	DB	"it",0
L_lab5app_2:
	DB	"Hey",0
	ALIGN	2
TaskWord:
	; >>>>> Line:	24
	; >>>>> { 
	jmp	L_lab5app_5
L_lab5app_6:
	; >>>>> Line:	25
	; >>>>> while (1) 
	jmp	L_lab5app_8
L_lab5app_7:
	; >>>>> Line:	27
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	28
	; >>>>> printString("Hey"); 
	mov	ax, L_lab5app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	29
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	31
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> printString("it"); 
	mov	ax, L_lab5app_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> YKSemPost(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	35
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> printString("works"); 
	mov	ax, L_lab5app_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
L_lab5app_8:
	jmp	L_lab5app_7
L_lab5app_9:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_5:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_6
	ALIGN	2
TaskSpace:
	; >>>>> Line:	42
	; >>>>> { 
	jmp	L_lab5app_11
L_lab5app_12:
	; >>>>> Line:	43
	; >>>>> while (1) 
	jmp	L_lab5app_14
L_lab5app_13:
	; >>>>> Line:	45
	; >>>>> YKSemPend(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printChar(' '); 
	mov	al, 32
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	47
	; >>>>> YKSemPost(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPost
	add	sp, 2
L_lab5app_14:
	jmp	L_lab5app_13
L_lab5app_15:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_11:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_12
L_lab5app_17:
	DB	"!",'"',0xD,0xA,0
	ALIGN	2
TaskPunc:
	; >>>>> Line:	52
	; >>>>> { 
	jmp	L_lab5app_18
L_lab5app_19:
	; >>>>> Line:	53
	; >>>>> while (1) 
	jmp	L_lab5app_21
L_lab5app_20:
	; >>>>> Line:	55
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	56
	; >>>>> printChar('"'); 
	mov	al, 34
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	57
	; >>>>> YKSemPost(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	59
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	60
	; >>>>> printChar(','); 
	mov	al, 44
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	61
	; >>>>> YKSemPost(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	63
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	64
	; >>>>> printString("!\"\r\n"); 
	mov	ax, L_lab5app_17
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> YKSemPost(PSe 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	67
	; >>>>> YKDelayTask(6); 
	mov	ax, 6
	push	ax
	call	YKDelayTask
	add	sp, 2
L_lab5app_21:
	jmp	L_lab5app_20
L_lab5app_22:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_18:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_19
	ALIGN	2
TaskPrime:
	; >>>>> Line:	72
	; >>>>> { 
	jmp	L_lab5app_24
L_lab5app_25:
	; >>>>> Line:	77
	; >>>>> while (1) 
	mov	word [bp-2], 1001
	; >>>>> Line:	77
	; >>>>> while (1) 
	jmp	L_lab5app_27
L_lab5app_26:
	; >>>>> Line:	79
	; >>>>> YKSemPend(NSemPtr); 
	push	word [NSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	82
	; >>>>> lncnt = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	83
	; >>>>> endval = curval + 500; 
	mov	ax, word [bp-2]
	add	ax, 500
	mov	word [bp-10], ax
	; >>>>> Line:	84
	; >>>>> for ( ; curval < endval; curval += 2) 
	jmp	L_lab5app_30
L_lab5app_29:
	; >>>>> Line:	86
	; >>>>> flag = 0; 
	mov	word [bp-6], 0
	; >>>>> Line:	87
	; >>>>> for (j = 3; (j*j) < curval; j += 2) 
	mov	word [bp-4], 3
	jmp	L_lab5app_34
L_lab5app_33:
	; >>>>> Line:	89
	; >>>>> if (curval % j == 0) 
	mov	ax, word [bp-2]
	cwd
	idiv	word [bp-4]
	mov	ax, dx
	test	ax, ax
	jne	L_lab5app_37
	; >>>>> Line:	91
	; >>>>> flag = 1; 
	mov	word [bp-6], 1
	; >>>>> Line:	92
	; >>>>> break; 
	jmp	L_lab5app_35
L_lab5app_37:
L_lab5app_36:
	add	word [bp-4], 2
L_lab5app_34:
	mov	ax, word [bp-4]
	imul	word [bp-4]
	mov	dx, word [bp-2]
	cmp	dx, ax
	jg	L_lab5app_33
L_lab5app_35:
	; >>>>> Line:	95
	; >>>>>  
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab5app_38
	; >>>>> Line:	97
	; >>>>> printChar(' '); 
	mov	al, 32
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	98
	; >>>>> printInt(curval); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	99
	; >>>>> lncnt++; 
	inc	word [bp-8]
	; >>>>> Line:	100
	; >>>>> if (lncnt > 9) 
	cmp	word [bp-8], 9
	jle	L_lab5app_39
	; >>>>> Line:	102
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	103
	; >>>>> lncnt = 0; 
	mov	word [bp-8], 0
L_lab5app_39:
L_lab5app_38:
L_lab5app_32:
	add	word [bp-2], 2
L_lab5app_30:
	mov	ax, word [bp-10]
	cmp	ax, word [bp-2]
	jg	L_lab5app_29
L_lab5app_31:
	; >>>>> Line:	107
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab5app_27:
	jmp	L_lab5app_26
L_lab5app_28:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_24:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab5app_25
L_lab5app_45:
	DB	"% >>>>>",0xD,0xA,0
L_lab5app_44:
	DB	", CPU usage: ",0
L_lab5app_43:
	DB	"<<<<< Context switches: ",0
L_lab5app_42:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab5app_41:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
TaskStat:
	; >>>>> Line:	112
	; >>>>> { 
	jmp	L_lab5app_46
L_lab5app_47:
	; >>>>> Line:	116
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	117
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab5app_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	118
	; >>>>> printString("Determining CPU capacity\r\n") 
	mov	ax, L_lab5app_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	119
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	120
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	121
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	122
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	123
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	125
	; >>>>> YKNewTask(TaskPrime, (void *) &TaskPRMStk[512], 32); 
	mov	al, 32
	push	ax
	mov	ax, (TaskPRMStk+1024)
	push	ax
	mov	ax, TaskPrime
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	126
	; >>>>> YKNewTask(TaskWord, (void *) &TaskWStk[512], 10); 
	mov	al, 10
	push	ax
	mov	ax, (TaskWStk+1024)
	push	ax
	mov	ax, TaskWord
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	127
	; >>>>> YKNewTask(TaskSpace, (void *) &TaskSStk[512], 11); 
	mov	al, 11
	push	ax
	mov	ax, (TaskSStk+1024)
	push	ax
	mov	ax, TaskSpace
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	128
	; >>>>> YKNewTask(TaskPunc, (void *) &TaskPStk[512], 12); 
	mov	al, 12
	push	ax
	mov	ax, (TaskPStk+1024)
	push	ax
	mov	ax, TaskPunc
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	130
	; >>>>> while (1) 
	jmp	L_lab5app_49
L_lab5app_48:
	; >>>>> Line:	132
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	135
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	136
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	137
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	139
	; >>>>> TaskStat, (void *) &T 
	mov	ax, L_lab5app_43
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	140
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	141
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_lab5app_44
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	142
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	143
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	144
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab5app_45
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	146
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	147
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	148
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	149
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab5app_49:
	jmp	L_lab5app_48
L_lab5app_50:
	mov	sp, bp
	pop	bp
	ret
L_lab5app_46:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab5app_47
	ALIGN	2
main:
	; >>>>> Line:	154
	; >>>>> { 
	jmp	L_lab5app_52
L_lab5app_53:
	; >>>>> Line:	155
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	158
	; >>>>> PSemPtr = YKSemCreate(1); 
	mov	ax, 1
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [PSemPtr], ax
	; >>>>> Line:	159
	; >>>>> SSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [SSemPtr], ax
	; >>>>> Line:	160
	; >>>>> WSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [WSemPtr], ax
	; >>>>> Line:	161
	; >>>>> NSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [NSemPtr], ax
	; >>>>> Line:	162
	; >>>>> YKNewTask(TaskStat, (void *) &T 
	mov	al, 30
	push	ax
	mov	ax, (TaskStatStk+1024)
	push	ax
	mov	ax, TaskStat
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	164
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab5app_52:
	push	bp
	mov	bp, sp
	jmp	L_lab5app_53
	ALIGN	2
L_lab5app_1:
	TIMES	512 db 0
TaskWStk:
	TIMES	1024 db 0
TaskSStk:
	TIMES	1024 db 0
TaskPStk:
	TIMES	1024 db 0
TaskStatStk:
	TIMES	1024 db 0
TaskPRMStk:
	TIMES	1024 db 0
PSemPtr:
	TIMES	2 db 0
SSemPtr:
	TIMES	2 db 0
WSemPtr:
	TIMES	2 db 0
NSemPtr:
	TIMES	2 db 0
