; Generated by c86 (BYU-NASM) 5.1 (beta) from linkedList.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_linkedList_1:
	DW	0
	ALIGN	2
createTCB:
	; >>>>> Line:	15
	; >>>>> { 
	jmp	L_linkedList_2
L_linkedList_3:
	; >>>>> Line:	16
	; >>>>> TCBarray[currentListSize].stackptr = stackptr; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 38
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 26
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	17
	; >>>>> TCBarray[currentListSize].priority = priority; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 38
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 28
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	18
	; >>>>> TCBarray[currentListSize].context = context; 
	lea	ax, [bp+8]
	mov	word [bp-2], ax
	mov	ax, word [L_linkedList_1]
	mov	cx, 38
	imul	cx
	add	ax, TCBarray
	mov	word [bp-4], ax
	mov	di, word [bp-4]
	mov	si, word [bp-2]
	mov	cx, 13
	rep
	movsw
	; >>>>> Line:	19
	; >>>>> TCBarray[currentListSize].ID = currentListSize; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 38
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 36
	mov	ax, word [L_linkedList_1]
	mov	word [si], ax
	; >>>>> Line:	20
	; >>>>> currentListSize++; 
	inc	word [L_linkedList_1]
	; >>>>> Line:	21
	; >>>>> return &(TCBarray[currentListSize-1]); 
	mov	ax, word [L_linkedList_1]
	dec	ax
	mov	cx, 38
	imul	cx
	add	ax, TCBarray
L_linkedList_4:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_2:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_linkedList_3
	ALIGN	2
insertTCBIntoRdyList:
	; >>>>> Line:	25
	; >>>>> { 
	jmp	L_linkedList_6
L_linkedList_7:
	; >>>>> Line:	27
	; >>>>> if (YKRdyList == 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_linkedList_8
	; >>>>> Line:	29
	; >>>>> YKRdyList = tcb; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	; >>>>> Line:	30
	; >>>>> tcb->next = 0; 
	mov	si, word [bp+4]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	31
	; >>>>> tcb->prev = 0; 
	mov	si, word [bp+4]
	add	si, 34
	mov	word [si], 0
	jmp	L_linkedList_9
L_linkedList_8:
	; >>>>> Line:	35
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	36
	; >>>>> while (tmp->priority < tcb->priority) 
	jmp	L_linkedList_11
L_linkedList_10:
	; >>>>> Line:	37
	; >>>>> tmp = tm 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_11:
	mov	si, word [bp-2]
	add	si, 28
	mov	di, word [bp+4]
	add	di, 28
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_linkedList_10
L_linkedList_12:
	; >>>>> Line:	38
	; >>>>> if (tmp->prev == 0) 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_13
	; >>>>> Line:	40
	; >>>>> YKRdyList = tcb; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	jmp	L_linkedList_14
L_linkedList_13:
	; >>>>> Line:	48
	; >>>>> tmp->prev->next = tcb; 
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_14:
	; >>>>> Line:	49
	; >>>>> tcb->prev = tmp->prev; 
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	50
	; >>>>> tcb->next = tmp; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	51
	; >>>>> tmp->prev = tcb; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_9:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_6:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_7
	ALIGN	2
removeFirstTCBFromRdyList:
	; >>>>> Line:	56
	; >>>>> { 
	jmp	L_linkedList_16
L_linkedList_17:
	; >>>>> Line:	58
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	59
	; >>>>> YKRdyList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	60
	; >>>>> tmp->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 32
	mov	si, word [si]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	61
	; >>>>> tmp->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	62
	; >>>>> YKSuspList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	63
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	64
	; >>>>> if (tmp->next != 0) 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	je	L_linkedList_18
	; >>>>> Line:	65
	; >>>>> tmp->next->prev = tmp; 
	mov	si, word [bp-2]
	add	si, 32
	mov	si, word [si]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
L_linkedList_18:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_17
	ALIGN	2
moveTCBToRdyList:
	; >>>>> Line:	72
	; >>>>> { 
	jmp	L_linkedList_20
L_linkedList_21:
	; >>>>> Line:	75
	; >>>>> if (tmp->prev == 0) 
	mov	si, word [bp+4]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_22
	; >>>>> Line:	76
	; >>>>> YKSuspList = tmp->next; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [si]
	mov	word [YKSuspList], ax
	jmp	L_linkedList_23
L_linkedList_22:
	; >>>>> Line:	78
	; >>>>> tmp->prev->next = tmp->next; 
	mov	si, word [bp+4]
	add	si, 32
	mov	di, word [bp+4]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
L_linkedList_23:
	; >>>>> Line:	79
	; >>>>> if (tmp->next != 0) 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	je	L_linkedList_24
	; >>>>> Line:	80
	; >>>>> tmp->next->prev = tmp->prev; 
	mov	si, word [bp+4]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_linkedList_24:
	; >>>>> Line:	82
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	84
	; >>>>> while (tmp2->priority < tmp->priority) 
	jmp	L_linkedList_26
L_linkedList_25:
	; >>>>> Line:	85
	; >>>>> tmp2 = tmp2->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_26:
	mov	si, word [bp-2]
	add	si, 28
	mov	di, word [bp+4]
	add	di, 28
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_linkedList_25
L_linkedList_27:
	; >>>>> Line:	86
	; >>>>> if (tmp2->prev == 0) 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_28
	; >>>>> Line:	87
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	jmp	L_linkedList_29
L_linkedList_28:
	; >>>>> Line:	89
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_29:
	; >>>>> Line:	90
	; >>>>> tmp->prev = tmp2->prev; 
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	91
	; >>>>> tmp->next = tmp2; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	92
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp+4]
	mov	word [si], ax
	mov	sp, bp
	pop	bp
	ret
L_linkedList_20:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_21
L_linkedList_43:
	DB	0xA,0xA,0
L_linkedList_42:
	DB	0xA,"  flags: ",0
L_linkedList_41:
	DB	0xA,"  ds: ",0
L_linkedList_40:
	DB	0xA,"  es: ",0
L_linkedList_39:
	DB	0xA,"  bp: ",0
L_linkedList_38:
	DB	0xA,"  di: ",0
L_linkedList_37:
	DB	0xA,"  si: ",0
L_linkedList_36:
	DB	0xA,"  dx: ",0
L_linkedList_35:
	DB	0xA,"  cx: ",0
L_linkedList_34:
	DB	0xA,"  bx: ",0
L_linkedList_33:
	DB	0xA,"  ax: ",0
L_linkedList_32:
	DB	0xA,"  ip: ",0
L_linkedList_31:
	DB	0xA,"  sp: ",0
	ALIGN	2
printContext:
	; >>>>> Line:	98
	; >>>>> { 
	jmp	L_linkedList_44
L_linkedList_45:
	; >>>>> Line:	99
	; >>>>> printString("\n  sp: "); 
	mov	ax, L_linkedList_31
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	100
	; >>>>> printInt(c.sp); 
	push	word [bp+4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	101
	; >>>>> printString("\n  ip: "); 
	mov	ax, L_linkedList_32
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	102
	; >>>>> printInt(c.ip); 
	push	word [bp+6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	116
	; >>>>> printString("\n  ax:  
	mov	ax, L_linkedList_33
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	117
	; >>>>> printInt(c.ax); 
	push	word [bp+8]
	call	printInt
	add	sp, 2
	; >>>>> Line:	118
	; >>>>> printString("\n  bx: "); 
	mov	ax, L_linkedList_34
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	119
	; >>>>> printInt(c.bx); 
	push	word [bp+10]
	call	printInt
	add	sp, 2
	; >>>>> Line:	120
	; >>>>> printString("\n  cx: "); 
	mov	ax, L_linkedList_35
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	121
	; >>>>> printInt(c.cx); 
	push	word [bp+12]
	call	printInt
	add	sp, 2
	; >>>>> Line:	122
	; >>>>> printString("\n  dx: "); 
	mov	ax, L_linkedList_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	123
	; >>>>> printInt(c.dx); 
	push	word [bp+14]
	call	printInt
	add	sp, 2
	; >>>>> Line:	124
	; >>>>> printString("\n  si: "); 
	mov	ax, L_linkedList_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	125
	; >>>>> printInt(c.si); 
	push	word [bp+16]
	call	printInt
	add	sp, 2
	; >>>>> Line:	126
	; >>>>> printString("\n  di: "); 
	mov	ax, L_linkedList_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	127
	; >>>>> printInt(c.di); 
	push	word [bp+18]
	call	printInt
	add	sp, 2
	; >>>>> Line:	128
	; >>>>> printString("\n  bp: "); 
	mov	ax, L_linkedList_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	129
	; >>>>> printInt(c.bp); 
	push	word [bp+20]
	call	printInt
	add	sp, 2
	; >>>>> Line:	130
	; >>>>> printString("\n  es: "); 
	mov	ax, L_linkedList_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printInt(c.es); 
	push	word [bp+22]
	call	printInt
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> printString("\n  ds: "); 
	mov	ax, L_linkedList_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	133
	; >>>>> printInt(c.ds); 
	push	word [bp+24]
	call	printInt
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> printString("\n  flags: "); 
	mov	ax, L_linkedList_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printInt(c.flags); 
	push	word [bp+28]
	call	printInt
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> printString("\n\n"); 
	mov	ax, L_linkedList_43
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_linkedList_44:
	push	bp
	mov	bp, sp
	jmp	L_linkedList_45
L_linkedList_49:
	DB	0xA,"  Delay: ",0
L_linkedList_48:
	DB	0xA,"  Priority: ",0
L_linkedList_47:
	DB	"  ID: ",0
	ALIGN	2
printTCB:
	; >>>>> Line:	141
	; >>>>> { 
	jmp	L_linkedList_50
L_linkedList_51:
	; >>>>> Line:	142
	; >>>>> printString("  ID: "); 
	mov	ax, L_linkedList_47
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	143
	; >>>>> printInt(t->ID); 
	mov	si, word [bp+4]
	add	si, 36
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	144
	; >>>>> pri 
	mov	ax, L_linkedList_48
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	145
	; >>>>> printInt(t->priority); 
	mov	si, word [bp+4]
	add	si, 28
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	146
	; >>>>> printString("\n  Delay: "); 
	mov	ax, L_linkedList_49
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	147
	; >>>>> printInt(t->delay); 
	mov	si, word [bp+4]
	add	si, 30
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	148
	; >>>>> printContext(t->context); 
	sub	sp, 26
	mov	di, sp
	mov	si, word [bp+4]
	mov	cx, 13
	rep
	movsw
	call	printContext
	add	sp, 26
	mov	sp, bp
	pop	bp
	ret
L_linkedList_50:
	push	bp
	mov	bp, sp
	jmp	L_linkedList_51
L_linkedList_53:
	DB	"TCB ",0
	ALIGN	2
printTCBs:
	; >>>>> Line:	152
	; >>>>> { 
	jmp	L_linkedList_54
L_linkedList_55:
	; >>>>> Line:	154
	; >>>>> for (i = 0; i < currentListSize; i++) 
	mov	word [bp-2], 0
	jmp	L_linkedList_57
L_linkedList_56:
	; >>>>> Line:	156
	; >>>>> printString("TCB "); 
	mov	ax, L_linkedList_53
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	157
	; >>>>> printInt(i); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	158
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	159
	; >>>>> printTCB(&TCBarray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 38
	imul	cx
	add	ax, TCBarray
	push	ax
	call	printTCB
	add	sp, 2
L_linkedList_59:
	inc	word [bp-2]
L_linkedList_57:
	mov	ax, word [L_linkedList_1]
	cmp	ax, word [bp-2]
	ja	L_linkedList_56
L_linkedList_58:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_54:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_55
L_linkedList_62:
	DB	"Suspended list: ",0xA,0
L_linkedList_61:
	DB	"Ready list: ",0xA,0
	ALIGN	2
printLists:
	; >>>>> Line:	163
	; >>>>> { 
	jmp	L_linkedList_63
L_linkedList_64:
	; >>>>> Line:	166
	; >>>>> printString("Ready list: \n"); 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	166
	; >>>>> printString("Ready list: \n"); 
	mov	ax, L_linkedList_61
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	167
	; >>>>> while (tmp != 0) 
	jmp	L_linkedList_66
L_linkedList_65:
	; >>>>> Line:	169
	; >>>>> printTCB(tmp); 
	push	word [bp-2]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	170
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_66:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_linkedList_65
L_linkedList_67:
	; >>>>> Line:	174
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	175
	; >>>>> printString("Suspended list: \n"); 
	mov	ax, L_linkedList_62
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	176
	; >>>>> while (tmp != 0) 
	jmp	L_linkedList_69
L_linkedList_68:
	; >>>>> Line:	178
	; >>>>> p 
	push	word [bp-2]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	179
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_69:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_linkedList_68
L_linkedList_70:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_63:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_64
	ALIGN	2
YKRdyList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
TCBarray:
	TIMES	228 db 0
runningTask:
	TIMES	2 db 0
