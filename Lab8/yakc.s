; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleCount:
	DW	0
running_flag:
	DW	0
ISRCallDepth:
	DW	0
lastRunTask:
	DW	0
YKCtxSwCount:
	DW	0
YKTickNum:
	DW	0
firstTime:
	DW	1
currentNumSemaphores:
	DW	0
currentNumQueues:
	DW	0
currentNumEvents:
	DW	0
initContext:
	DW	0,0,0,0,0
	DW	0,0,0,0,0
	DW	0,0,512
L_yakc_2:
	DB	0xA,"************* BEGIN ***************",0xA,0xA,0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	38
	; >>>>> { 
	jmp	L_yakc_3
L_yakc_4:
	; >>>>> Line:	39
	; >>>>> printString("\n************* BEGIN ***************\n\n"); 
	mov	ax, L_yakc_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	41
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	44
	; >>>>> YKNewTask(YKIdleTask, (void *) &IdleStk[256], 
	mov	al, 100
	push	ax
	mov	ax, (L_yakc_1+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	46
	; >>>>> lastRunTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [lastRunTask], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_3:
	push	bp
	mov	bp, sp
	jmp	L_yakc_4
L_yakc_6:
	DB	"Entering idle task",0xA,0xD,0
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	50
	; >>>>> { 
	jmp	L_yakc_7
L_yakc_8:
	; >>>>> Line:	51
	; >>>>> printString("Entering idle task\n\r"); 
	mov	ax, L_yakc_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	52
	; >>>>> while(1) 
	jmp	L_yakc_10
L_yakc_9:
	; >>>>> Line:	55
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	56
	; >>>>> tmp = YKIdleCount + 1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [bp-2], ax
	; >>>>> Line:	58
	; >>>>> YKIdleCount = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKIdleCount], ax
	; >>>>> Line:	59
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_10:
	jmp	L_yakc_9
L_yakc_11:
	mov	sp, bp
	pop	bp
	ret
L_yakc_7:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_8
	ALIGN	2
YKNewTask:
	; >>>>> Line:	69
	; >>>>> { 
	jmp	L_yakc_13
L_yakc_14:
	; >>>>> Line:	77
	; >>>>> newTCB = createTCB(taskStack, priority, initContext); 
	sub	sp, 26
	mov	di, sp
	mov	si, initContext
	mov	cx, 13
	rep
	movsw
	mov	al, byte [bp+8]
	xor	ah, ah
	push	ax
	push	word [bp+6]
	call	createTCB
	add	sp, 30
	mov	word [bp-2], ax
	; >>>>> Line:	79
	; >>>>> newTCB->context.sp = (int)(taskStack); 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	80
	; >>>>> newTCB->context.ip = (int)task; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	81
	; >>>>> newTCB->context.bp = (int)taskStack; 
	mov	si, word [bp-2]
	add	si, 16
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	82
	; >>>>> insertTCBIntoRdyList(newT 
	push	word [bp-2]
	call	insertTCBIntoRdyList
	add	sp, 2
	; >>>>> Line:	86
	; >>>>> if (running_flag) 
	mov	ax, word [running_flag]
	test	ax, ax
	je	L_yakc_15
	; >>>>> Line:	88
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_15:
	mov	sp, bp
	pop	bp
	ret
L_yakc_13:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_14
	ALIGN	2
YKRun:
	; >>>>> Line:	93
	; >>>>> { 
	jmp	L_yakc_17
L_yakc_18:
	; >>>>> Line:	96
	; >>>>> running_flag = 1; 
	mov	word [running_flag], 1
	; >>>>> Line:	99
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_17:
	push	bp
	mov	bp, sp
	jmp	L_yakc_18
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	103
	; >>>>> { 
	jmp	L_yakc_20
L_yakc_21:
	; >>>>> Line:	108
	; >>>>> if (count == 0) 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_22
	; >>>>> Line:	109
	; >>>>> return; 
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	114
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	115
	; >>>>> YKRdyList->delay = count; 
	mov	si, word [YKRdyList]
	add	si, 30
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	116
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	117
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	120
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_23:
	mov	sp, bp
	pop	bp
	ret
L_yakc_20:
	push	bp
	mov	bp, sp
	jmp	L_yakc_21
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	124
	; >>>>> { 
	jmp	L_yakc_25
L_yakc_26:
	; >>>>> Line:	128
	; >>>>> ISRCallDepth++; 
	inc	word [ISRCallDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_25:
	push	bp
	mov	bp, sp
	jmp	L_yakc_26
	ALIGN	2
YKExitISR:
	; >>>>> Line:	132
	; >>>>> { 
	jmp	L_yakc_28
L_yakc_29:
	; >>>>> Line:	136
	; >>>>> ISRCallDepth--; 
	dec	word [ISRCallDepth]
	; >>>>> Line:	137
	; >>>>> if (ISRCallDepth == 0) 
	mov	ax, word [ISRCallDepth]
	test	ax, ax
	jne	L_yakc_30
	; >>>>> Line:	138
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_30:
	mov	sp, bp
	pop	bp
	ret
L_yakc_28:
	push	bp
	mov	bp, sp
	jmp	L_yakc_29
	ALIGN	2
YKScheduler:
	; >>>>> Line:	142
	; >>>>> { 
	jmp	L_yakc_32
L_yakc_33:
	; >>>>> Line:	147
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	148
	; >>>>> if (firstTime) 
	mov	ax, word [firstTime]
	test	ax, ax
	je	L_yakc_34
	; >>>>> Line:	150
	; >>>>> firstTime = 0; 
	mov	word [firstTime], 0
	; >>>>> Line:	152
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	154
	; >>>>> YKFirstDispatcher(); 
	call	YKFirstDispatcher
	jmp	L_yakc_35
L_yakc_34:
	; >>>>> Line:	156
	; >>>>> else if (lastRunTask != YKRdyList) 
	mov	ax, word [YKRdyList]
	cmp	ax, word [lastRunTask]
	je	L_yakc_36
	; >>>>> Line:	159
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	161
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
L_yakc_36:
L_yakc_35:
	mov	sp, bp
	pop	bp
	ret
L_yakc_32:
	push	bp
	mov	bp, sp
	jmp	L_yakc_33
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	167
	; >>>>> { 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	176
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	178
	; >>>>> while(tmp != 0) 
	jmp	L_yakc_41
L_yakc_40:
	; >>>>> Line:	180
	; >>>>> if (tmp->delay > 0) 
	mov	si, word [bp-2]
	add	si, 30
	cmp	word [si], 0
	jle	L_yakc_43
	; >>>>> Line:	182
	; >>>>> (tmp->delay)--; 
	mov	si, word [bp-2]
	add	si, 30
	dec	word [si]
	; >>>>> Line:	183
	; >>>>> if (tmp->delay == 0) 
	mov	si, word [bp-2]
	add	si, 30
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_44
	; >>>>> Line:	185
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	186
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	188
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-4]
	call	moveTCBToRdyList
	add	sp, 2
	jmp	L_yakc_45
L_yakc_44:
	; >>>>> Line:	191
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_45:
	jmp	L_yakc_46
L_yakc_43:
	; >>>>> Line:	194
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_46:
L_yakc_41:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_40
L_yakc_42:
	; >>>>> Line:	196
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_39
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	201
	; >>>>> { 
	jmp	L_yakc_48
L_yakc_49:
	; >>>>> Line:	204
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	205
	; >>>>> sem = &(SemArray[currentNumSemaphores]); 
	mov	ax, word [currentNumSemaphores]
	shl	ax, 1
	add	ax, SemArray
	mov	word [bp-2], ax
	; >>>>> Line:	206
	; >>>>> sem->value = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	208
	; >>>>> currentNumSemaphores++; 
	inc	word [currentNumSemaphores]
	; >>>>> Line:	209
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	210
	; >>>>> return sem; 
	mov	ax, word [bp-2]
L_yakc_50:
	mov	sp, bp
	pop	bp
	ret
L_yakc_48:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_49
	ALIGN	2
YKSemPend:
	; >>>>> Line:	216
	; >>>>> { 
	jmp	L_yakc_52
L_yakc_53:
	; >>>>> Line:	217
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	223
	; >>>>> if (semaphore->value > 0) 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jle	L_yakc_54
	; >>>>> Line:	226
	; >>>>> (semaphore->value)--; 
	dec	word [si]
	jmp	L_yakc_55
L_yakc_54:
	; >>>>> Line:	232
	; >>>>> (semaphore->value)--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	233
	; >>>>> YKRdyList->pendingSem = semaphore; 
	mov	si, word [YKRdyList]
	add	si, 38
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	235
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	237
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_55:
	; >>>>> Line:	239
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_52:
	push	bp
	mov	bp, sp
	jmp	L_yakc_53
	ALIGN	2
YKSemPost:
	; >>>>> Line:	244
	; >>>>> { 
	jmp	L_yakc_57
L_yakc_58:
	; >>>>> Line:	247
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	249
	; >>>>> (semaphore->va 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	255
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	256
	; >>>>> while(tmp != 0) 
	jmp	L_yakc_60
L_yakc_59:
	; >>>>> Line:	259
	; >>>>> if (tmp->pendingSem == semaphore){ 
	mov	si, word [bp-2]
	add	si, 38
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_62
	; >>>>> Line:	260
	; >>>>> tmp->pendingSem = 0; 
	mov	si, word [bp-2]
	add	si, 38
	mov	word [si], 0
	; >>>>> Line:	261
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	262
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	263
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-4]
	call	moveTCBToRdyList
	add	sp, 2
	jmp	L_yakc_63
L_yakc_62:
	; >>>>> Line:	267
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_63:
L_yakc_60:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_59
L_yakc_61:
	; >>>>> Line:	270
	; >>>>> if (ISRCallDepth <= 0) 
	mov	ax, word [ISRCallDepth]
	test	ax, ax
	jne	L_yakc_64
	; >>>>> Line:	273
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_64:
L_yakc_65:
	; >>>>> Line:	280
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_57:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_58
	ALIGN	2
YKQCreate:
	; >>>>> Line:	284
	; >>>>> { 
	jmp	L_yakc_67
L_yakc_68:
	; >>>>> Line:	286
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	287
	; >>>>> queue = &(QueueArray[currentNumQueues]); 
	mov	ax, word [currentNumQueues]
	mov	cx, 3
	shl	ax, cl
	add	ax, QueueArray
	mov	word [bp-2], ax
	; >>>>> Line:	288
	; >>>>> currentNumQueues++; 
	inc	word [currentNumQueues]
	; >>>>> Line:	289
	; >>>>> queue->qArray = start; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	290
	; >>>>> queue->qStart = start; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	291
	; >>>>> queue->qEnd = start; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	292
	; >>>>> queue->qMaxSize = size; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	293
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	294
	; >>>>> return queue; 
	mov	ax, word [bp-2]
L_yakc_69:
	mov	sp, bp
	pop	bp
	ret
L_yakc_67:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_68
	ALIGN	2
YKQPend:
	; >>>>> Line:	299
	; >>>>> { 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	304
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	305
	; >>>>> if (qIsEmpty(queue)) 
	push	word [bp+4]
	call	qIsEmpty
	add	sp, 2
	test	ax, ax
	je	L_yakc_73
	; >>>>> Line:	308
	; >>>>> YKRdyList->pendingQueue = queue; 
	mov	si, word [YKRdyList]
	add	si, 40
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	309
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	310
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_73:
	; >>>>> Line:	315
	; >>>>> returnVal = qRemove(queue); 
	push	word [bp+4]
	call	qRemove
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	321
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	322
	; >>>>> return returnVal; 
	mov	ax, word [bp-2]
L_yakc_74:
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_72
	ALIGN	2
YKQPost:
	; >>>>> Line:	326
	; >>>>> { 
	jmp	L_yakc_76
L_yakc_77:
	; >>>>> Line:	332
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	333
	; >>>>> if (qIsFull(queue)) 
	push	word [bp+4]
	call	qIsFull
	add	sp, 2
	test	ax, ax
	je	L_yakc_78
	; >>>>> Line:	335
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	336
	; >>>>> { 
	xor	ax, ax
	jmp	L_yakc_79
	jmp	L_yakc_80
L_yakc_78:
	; >>>>> Line:	346
	; >>>>> qInsert(queue, msg); 
	push	word [bp+6]
	push	word [bp+4]
	call	qInsert
	add	sp, 4
	; >>>>> Line:	348
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	349
	; >>>>> while(tmp != 0) 
	jmp	L_yakc_82
L_yakc_81:
	; >>>>> Line:	351
	; >>>>> if (tmp->pendingQueue == queue) 
	mov	si, word [bp-2]
	add	si, 40
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_84
	; >>>>> Line:	353
	; >>>>> tmp->pendingQueue = 0; 
	mov	si, word [bp-2]
	add	si, 40
	mov	word [si], 0
	; >>>>> Line:	354
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	355
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	356
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-4]
	call	moveTCBToRdyList
	add	sp, 2
	jmp	L_yakc_85
L_yakc_84:
	; >>>>> Line:	360
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_85:
L_yakc_82:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_81
L_yakc_83:
	; >>>>> Line:	363
	; >>>>> if (ISRCallDepth <= 0) 
	mov	ax, word [ISRCallDepth]
	test	ax, ax
	jne	L_yakc_86
	; >>>>> Line:	366
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_86:
	; >>>>> Line:	368
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	369
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_80:
L_yakc_79:
	mov	sp, bp
	pop	bp
	ret
L_yakc_76:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_77
L_yakc_88:
	DB	"ERROR: MAXIMUM NUMBER OF EVENTS EXCEEDED",0
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	374
	; >>>>> { 
	jmp	L_yakc_89
L_yakc_90:
	; >>>>> Line:	377
	; >>>>> if (currentNumEvents > 2) 
	cmp	word [currentNumEvents], 2
	jbe	L_yakc_91
	; >>>>> Line:	379
	; >>>>> tMode = 
	mov	ax, L_yakc_88
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	380
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_92
L_yakc_91:
	; >>>>> Line:	383
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	384
	; >>>>> event = &(EventArray[currentNumEvents]); 
	mov	ax, word [currentNumEvents]
	shl	ax, 1
	add	ax, EventArray
	mov	word [bp-2], ax
	; >>>>> Line:	385
	; >>>>> *event = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	386
	; >>>>> currentNumEvents++; 
	inc	word [currentNumEvents]
	; >>>>> Line:	387
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	388
	; >>>>> return event; 
	mov	ax, word [bp-2]
L_yakc_92:
	mov	sp, bp
	pop	bp
	ret
L_yakc_89:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_90
L_yakc_94:
	DB	0xA,0xD,"ERROR: INVALID WAIT MODE",0xA,0xD,0
	ALIGN	2
YKEventPend:
	; >>>>> Line:	392
	; >>>>> { 
	jmp	L_yakc_95
L_yakc_96:
	; >>>>> Line:	395
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	396
	; >>>>> switch (waitMode) { 
	mov	ax, word [bp+8]
	dec	ax
	je	L_yakc_99
	inc	ax
	je	L_yakc_100
	jmp	L_yakc_98
L_yakc_99:
	; >>>>> Line:	398
	; >>>>> if ((*event & eventMask) != eventMask) 
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	mov	dx, word [bp+6]
	cmp	dx, ax
	je	L_yakc_101
	; >>>>> Line:	402
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	403
	; >>>>> tmp->pendingEventGroup = event; 
	mov	si, word [bp-2]
	add	si, 42
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	404
	; >>>>> tmp->pendingEventFlags = eventMask; 
	mov	si, word [bp-2]
	add	si, 44
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	405
	; >>>>> tmp->eventWaitMode = 
	mov	si, word [bp-2]
	add	si, 46
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	407
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	408
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	409
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	413
	; >>>>> return *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_102
	jmp	L_yakc_103
L_yakc_101:
	; >>>>> Line:	422
	; >>>>> return *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_102
L_yakc_103:
	; >>>>> Line:	424
	; >>>>> break; 
	jmp	L_yakc_97
L_yakc_100:
	; >>>>> Line:	426
	; >>>>> if ((*event & eventMask) == 0) 
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	jne	L_yakc_104
	; >>>>> Line:	430
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	431
	; >>>>> tmp->pendingEventGroup = event; 
	mov	si, word [bp-2]
	add	si, 42
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	432
	; >>>>> tmp->pendingEventFlags = eventMask; 
	mov	si, word [bp-2]
	add	si, 44
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	433
	; >>>>> tmp->eventWaitMode = waitMode; 
	mov	si, word [bp-2]
	add	si, 46
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	434
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	435
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	436
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	440
	; >>>>> return *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_102
	jmp	L_yakc_105
L_yakc_104:
	; >>>>> Line:	449
	; >>>>> return *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_102
L_yakc_105:
	; >>>>> Line:	451
	; >>>>> break; 
	jmp	L_yakc_97
L_yakc_98:
	; >>>>> Line:	453
	; >>>>> if (t 
	mov	ax, L_yakc_94
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	454
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_102
L_yakc_97:
	; >>>>> Line:	458
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_102:
	mov	sp, bp
	pop	bp
	ret
L_yakc_95:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_96
L_yakc_107:
	DB	0xA,0xD,"----Calling Scheduler from YKEVentSet------",0xA,0xD,0
	ALIGN	2
YKEventSet:
	; >>>>> Line:	462
	; >>>>> { 
	jmp	L_yakc_108
L_yakc_109:
	; >>>>> Line:	470
	; >>>>> taskMadeReady = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	481
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	483
	; >>>>> curFlags = *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	484
	; >>>>> newFlags = (curFlags & ~eventMask) | (eventMask); 
	mov	ax, word [bp+6]
	not	ax
	and	ax, word [bp-4]
	or	ax, word [bp+6]
	mov	word [bp-6], ax
	; >>>>> Line:	485
	; >>>>> *event = newFlags; 
	mov	si, word [bp+4]
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	493
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-8], ax
	; >>>>> Line:	494
	; >>>>> while(tmp != 0) 
	jmp	L_yakc_111
L_yakc_110:
	; >>>>> Line:	496
	; >>>>> if ((tmp->pendingEventGroup == event) && (tmp->pendingEventGroup != 0)) 
	mov	si, word [bp-8]
	add	si, 42
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_113
	mov	si, word [bp-8]
	add	si, 42
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_113
	; >>>>> Line:	498
	; >>>>> if (t 
	mov	si, word [bp-8]
	add	si, 46
	cmp	word [si], 1
	jne	L_yakc_114
	; >>>>> Line:	500
	; >>>>> if ((*event & (tmp->pendingEventFlags)) == (tmp->pendingEventFlags)) 
	mov	si, word [bp-8]
	add	si, 44
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	si, word [bp-8]
	add	si, 44
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yakc_115
	; >>>>> Line:	502
	; >>>>> tmp->pendingEventGroup = 0; 
	mov	si, word [bp-8]
	add	si, 42
	mov	word [si], 0
	; >>>>> Line:	503
	; >>>>> tmp->pendingEventFlags = 0; 
	mov	si, word [bp-8]
	add	si, 44
	mov	word [si], 0
	; >>>>> Line:	504
	; >>>>> tmp->eventWaitMode = -1; 
	mov	si, word [bp-8]
	add	si, 46
	mov	word [si], -1
	; >>>>> Line:	505
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	506
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	509
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	510
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-10]
	call	moveTCBToRdyList
	add	sp, 2
	; >>>>> Line:	511
	; >>>>> taskMadeReady = 1; 
	mov	word [bp-2], 1
	jmp	L_yakc_116
L_yakc_115:
	; >>>>> Line:	515
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_116:
	jmp	L_yakc_117
L_yakc_114:
	; >>>>> Line:	520
	; >>>>> if ((*event & (tmp->pendingEventFlags)) != 0) 
	mov	si, word [bp-8]
	add	si, 44
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	je	L_yakc_118
	; >>>>> Line:	522
	; >>>>> tmp->pendingEve 
	mov	si, word [bp-8]
	add	si, 42
	mov	word [si], 0
	; >>>>> Line:	523
	; >>>>> tmp->pendingEventFlags = 0; 
	mov	si, word [bp-8]
	add	si, 44
	mov	word [si], 0
	; >>>>> Line:	524
	; >>>>> tmp->eventWaitMode = -1; 
	mov	si, word [bp-8]
	add	si, 46
	mov	word [si], -1
	; >>>>> Line:	525
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	526
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	529
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	530
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-10]
	call	moveTCBToRdyList
	add	sp, 2
	; >>>>> Line:	531
	; >>>>> taskMadeReady = 1; 
	mov	word [bp-2], 1
	jmp	L_yakc_119
L_yakc_118:
	; >>>>> Line:	535
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_119:
L_yakc_117:
	jmp	L_yakc_120
L_yakc_113:
	; >>>>> Line:	540
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_120:
L_yakc_111:
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_yakc_110
L_yakc_112:
	; >>>>> Line:	543
	; >>>>> if (taskMadeReady && (ISRCallDepth <= 0)) 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_yakc_121
	mov	ax, word [ISRCallDepth]
	test	ax, ax
	jne	L_yakc_121
	; >>>>> Line:	545
	; >>>>> printString("\n\r----Calling Scheduler from YKEVentSet------\n\r"); 
	mov	ax, L_yakc_107
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	546
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_121:
	; >>>>> Line:	548
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_108:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_yakc_109
	ALIGN	2
YKEventReset:
	; >>>>> Line:	552
	; >>>>> { 
	jmp	L_yakc_123
L_yakc_124:
	; >>>>> Line:	561
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	562
	; >>>>> curVal = *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	563
	; >>>>> newVal = (curVal & ~eventMask) | (0 & eventMask); 
	mov	ax, word [bp+6]
	not	ax
	and	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	567
	; >>>>> *event = newVal; 
	mov	si, word [bp+4]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	568
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_123:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_124
	ALIGN	2
L_yakc_1:
	TIMES	512 db 0
SemArray:
	TIMES	12 db 0
QueueArray:
	TIMES	24 db 0
EventArray:
	TIMES	4 db 0
