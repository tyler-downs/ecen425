        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      reset_isr ; Reset               ; Int 08h (IRQ 0)
        dd      tick_isr ; Tick                ; Int 09h (IRQ 1)
        dd      keyboard_isr ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

	align	2
SlidePiece:	; void SlidePiece(int ID, int direction)
	push	bp
	mov	bp, sp
	push	ax
	push	dx
 	mov	ah, 0		; Slide piece operation
  	mov	al, [bp+6]	; Move direction (loword only)
	mov	dx, [bp+4]	; Move id
	int	1Bh		; Call Simptris services
	pop	dx
	pop	ax
	pop	bp
	ret
RotatePiece:	; void RotatePiece(int ID, int direction)
	push	bp
	mov	bp, sp
	push	ax
	push	dx
 	mov	ah, 1		; Rotate piece operation
 	mov	al, [bp+6]	; Move direction (loword only)
	mov	dx, [bp+4]	; Move id
	int	1Bh		; Call Simptris services
	pop	dx
	pop	ax
	pop	bp
	ret
SeedSimptris:	; void SeedSimptris(long seed)
	push	bp
	mov	bp, sp
	push	ax
	push	cx
	push    dx
 	mov	ah, 2		; Seed operation
	mov	dx, [bp+4]	; Move loword of seed
	mov	cx, [bp+6]	; Move hiword of seed
	int	1Bh		; Call Simptris services
	pop	dx
	pop	cx
	pop	ax
	pop	bp
	ret
StartSimptris:	; void StartSimptris(void)
	push	ax
 	mov	ah, 3		; Start Simptris operation
	int	1Bh		; Call Simptris services
	pop	ax
	ret

reset_isr:
	call resetInterruptHandler

tick_isr:
	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push bp
	push es
	push ds

	call YKEnterISR

	sti 		; enable interrupts
	call tickInterruptHandler
	cli			; disable interrupts
	
	; send EOI command to PIC
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)

	call YKExitISR

	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	iret

keyboard_isr:
	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push bp
	push es
	push ds

	call YKEnterISR

	sti 		; enable interrupts
	call keyboardInterruptHandler
	cli			; disable interrupts
	
	; send EOI command to PIC
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)

	call YKExitISR

	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	iret


; Generated by c86 (BYU-NASM) 5.1 (beta) from interruptHandlers.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_interruptHandlers_2:
	DW	0
	ALIGN	2
resetInterruptHandler:
	; >>>>> Line:	14
	; >>>>> { 
	jmp	L_interruptHandlers_3
L_interruptHandlers_4:
	; >>>>> Line:	15
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_interruptHandlers_3:
	push	bp
	mov	bp, sp
	jmp	L_interruptHandlers_4
	ALIGN	2
tickInterruptHandler:
	; >>>>> Line:	19
	; >>>>> { 
	jmp	L_interruptHandlers_6
L_interruptHandlers_7:
	; >>>>> Line:	52
	; >>>>> YKTickHandler(); 
	call	YKTickHandler
	mov	sp, bp
	pop	bp
	ret
L_interruptHandlers_6:
	push	bp
	mov	bp, sp
	jmp	L_interruptHandlers_7
L_interruptHandlers_10:
	DB	") IGNORED",0xA,0
L_interruptHandlers_9:
	DB	0xA,"KEYPRESS (",0
	ALIGN	2
keyboardInterruptHandler:
	; >>>>> Line:	56
	; >>>>> { 
	jmp	L_interruptHandlers_11
L_interruptHandlers_12:
	; >>>>> Line:	58
	; >>>>> c = KeyBuffer; 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	60
	; >>>>> if(c == 'a') YKEventSet(charEvent, 0x1); 
	cmp	byte [bp-1], 97
	jne	L_interruptHandlers_13
	; >>>>> Line:	60
	; >>>>> if(c == 'a') YKEventSet(charEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_14
L_interruptHandlers_13:
	; >>>>> Line:	61
	; >>>>> else if(c == 'b') YKEventSet(charEvent, 0x2); 
	cmp	byte [bp-1], 98
	jne	L_interruptHandlers_15
	; >>>>> Line:	61
	; >>>>> else if(c == 'b') YKEventSet(charEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_16
L_interruptHandlers_15:
	; >>>>> Line:	62
	; >>>>> else if(c == 'c') YKEventSet(charEvent 
	cmp	byte [bp-1], 99
	jne	L_interruptHandlers_17
	; >>>>> Line:	62
	; >>>>> else if(c == 'c') YKEventSet(charEvent 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_18
L_interruptHandlers_17:
	; >>>>> Line:	63
	; >>>>> else if(c == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	cmp	byte [bp-1], 100
	jne	L_interruptHandlers_19
	; >>>>> Line:	63
	; >>>>> else if(c == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_20
L_interruptHandlers_19:
	; >>>>> Line:	64
	; >>>>> else if(c == '1') YKEventSet(numEvent, 0x1); 
	cmp	byte [bp-1], 49
	jne	L_interruptHandlers_21
	; >>>>> Line:	64
	; >>>>> else if(c == '1') YKEventSet(numEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_22
L_interruptHandlers_21:
	; >>>>> Line:	65
	; >>>>> else if(c == '2') YKEventSet(numEvent, 0x2); 
	cmp	byte [bp-1], 50
	jne	L_interruptHandlers_23
	; >>>>> Line:	65
	; >>>>> else if(c == '2') YKEventSet(numEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_24
L_interruptHandlers_23:
	; >>>>> Line:	66
	; >>>>> else if(c == '3') YKEventSet(numEvent, 0x4); 
	cmp	byte [bp-1], 51
	jne	L_interruptHandlers_25
	; >>>>> Line:	66
	; >>>>> else if(c == '3') YKEventSet(numEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_26
L_interruptHandlers_25:
	; >>>>> Line:	68
	; >>>>> print("\nKEYPRESS (", 11); 
	mov	ax, 11
	push	ax
	mov	ax, L_interruptHandlers_9
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	69
	; >>>>> printChar(c); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	70
	; >>>>> print(") IGNORED\n", 10); 
	mov	ax, 10
	push	ax
	mov	ax, L_interruptHandlers_10
	push	ax
	call	print
	add	sp, 4
L_interruptHandlers_26:
L_interruptHandlers_24:
L_interruptHandlers_22:
L_interruptHandlers_20:
L_interruptHandlers_18:
L_interruptHandlers_16:
L_interruptHandlers_14:
	mov	sp, bp
	pop	bp
	ret
L_interruptHandlers_11:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_interruptHandlers_12
	ALIGN	2
L_interruptHandlers_1:
	TIMES	512 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from linkedList.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_linkedList_1:
	DW	0
	ALIGN	2
createTCB:
	; >>>>> Line:	14
	; >>>>> { 
	jmp	L_linkedList_2
L_linkedList_3:
	; >>>>> Line:	15
	; >>>>> TCBarray[currentListSize].stackptr = stackptr; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 26
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	16
	; >>>>> TCBarray[currentListSize].priority = priority; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 28
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	17
	; >>>>> TCBarray[currentListSize].context = context; 
	lea	ax, [bp+8]
	mov	word [bp-2], ax
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	word [bp-4], ax
	mov	di, word [bp-4]
	mov	si, word [bp-2]
	mov	cx, 13
	rep
	movsw
	; >>>>> Line:	18
	; >>>>> TCBarray[currentListSize].ID = currentListSize; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 36
	mov	ax, word [L_linkedList_1]
	mov	word [si], ax
	; >>>>> Line:	19
	; >>>>> TCBarray[currentListSize].pendingSem = 0; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 38
	mov	word [si], 0
	; >>>>> Line:	20
	; >>>>> TCBarray[currentListSize].pendingQueue = 0; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 40
	mov	word [si], 0
	; >>>>> Line:	21
	; >>>>> TCBarray[currentListSize].pendingEventGroup = 0; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 42
	mov	word [si], 0
	; >>>>> Line:	22
	; >>>>> TCBarray[currentListSize].pendingEventFlags = 0; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 44
	mov	word [si], 0
	; >>>>> Line:	23
	; >>>>> TCBarray[currentListSize].eventWaitMode = -1; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 46
	mov	word [si], -1
	; >>>>> Line:	24
	; >>>>> currentListSize++; 
	inc	word [L_linkedList_1]
	; >>>>> Line:	25
	; >>>>> return &(TCBarray[currentL 
	mov	ax, word [L_linkedList_1]
	dec	ax
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
L_linkedList_4:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_2:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_linkedList_3
	ALIGN	2
insertTCBIntoRdyList:
	; >>>>> Line:	29
	; >>>>> { 
	jmp	L_linkedList_6
L_linkedList_7:
	; >>>>> Line:	31
	; >>>>> if (YKRdyList == 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_linkedList_8
	; >>>>> Line:	33
	; >>>>> YKRdyList = tcb; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	; >>>>> Line:	34
	; >>>>> tcb->next = 0; 
	mov	si, word [bp+4]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	35
	; >>>>> tcb->prev = 0; 
	mov	si, word [bp+4]
	add	si, 34
	mov	word [si], 0
	jmp	L_linkedList_9
L_linkedList_8:
	; >>>>> Line:	39
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	40
	; >>>>> while (tmp->priority < tcb->priority) 
	jmp	L_linkedList_11
L_linkedList_10:
	; >>>>> Line:	41
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_11:
	mov	si, word [bp-2]
	add	si, 28
	mov	di, word [bp+4]
	add	di, 28
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_linkedList_10
L_linkedList_12:
	; >>>>> Line:	42
	; >>>>> if (tmp->prev == 0) 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_13
	; >>>>> Line:	44
	; >>>>> YKRdyList = tcb; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	jmp	L_linkedList_14
L_linkedList_13:
	; >>>>> Line:	52
	; >>>>> tmp->prev->next = tcb; 
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_14:
	; >>>>> Line:	53
	; >>>>> tcb->prev = tmp->prev; 
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	54
	; >>>>> tcb->next = tmp; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	55
	; >>>>> tmp->prev = tcb; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_9:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_6:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_7
	ALIGN	2
removeFirstTCBFromRdyList:
	; >>>>> Line:	60
	; >>>>> { 
	jmp	L_linkedList_16
L_linkedList_17:
	; >>>>> Line:	62
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	63
	; >>>>> YKRdyList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	64
	; >>>>> tmp->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 32
	mov	si, word [si]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	65
	; >>>>> tmp->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	66
	; >>>>> YKSuspList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	67
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	68
	; >>>>> if (tmp->next != 0) 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	je	L_linkedList_18
	; >>>>> Line:	69
	; >>>>> tmp->next->prev = tmp; 
	mov	si, word [bp-2]
	add	si, 32
	mov	si, word [si]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
L_linkedList_18:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_17
	ALIGN	2
moveTCBToRdyList:
	; >>>>> Line:	76
	; >>>>> { 
	jmp	L_linkedList_20
L_linkedList_21:
	; >>>>> Line:	79
	; >>>>> if (tmp->prev == 0) 
	mov	si, word [bp+4]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_22
	; >>>>> Line:	80
	; >>>>> YKSuspList = tmp->next; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [si]
	mov	word [YKSuspList], ax
	jmp	L_linkedList_23
L_linkedList_22:
	; >>>>> Line:	82
	; >>>>> tmp->prev->next = tmp->next; 
	mov	si, word [bp+4]
	add	si, 32
	mov	di, word [bp+4]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
L_linkedList_23:
	; >>>>> Line:	83
	; >>>>> if (tmp->next != 0) 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	je	L_linkedList_24
	; >>>>> Line:	84
	; >>>>> tmp->next->prev = tmp->prev; 
	mov	si, word [bp+4]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_linkedList_24:
	; >>>>> Line:	86
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	88
	; >>>>> while (tmp2->priority < tmp->priority) 
	jmp	L_linkedList_26
L_linkedList_25:
	; >>>>> Line:	89
	; >>>>> tmp2 = tmp2->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_26:
	mov	si, word [bp-2]
	add	si, 28
	mov	di, word [bp+4]
	add	di, 28
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_linkedList_25
L_linkedList_27:
	; >>>>> Line:	90
	; >>>>> if (tmp2->prev == 0) 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_28
	; >>>>> Line:	91
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	jmp	L_linkedList_29
L_linkedList_28:
	; >>>>> Line:	93
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_29:
	; >>>>> Line:	94
	; >>>>> tmp->prev = tmp2- 
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	95
	; >>>>> tmp->next = tmp2; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	96
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp+4]
	mov	word [si], ax
	mov	sp, bp
	pop	bp
	ret
L_linkedList_20:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_21
L_linkedList_43:
	DB	0xA,0xA,0
L_linkedList_42:
	DB	0xA,"  flags: ",0
L_linkedList_41:
	DB	0xA,"  ds: ",0
L_linkedList_40:
	DB	0xA,"  es: ",0
L_linkedList_39:
	DB	0xA,"  bp: ",0
L_linkedList_38:
	DB	0xA,"  di: ",0
L_linkedList_37:
	DB	0xA,"  si: ",0
L_linkedList_36:
	DB	0xA,"  dx: ",0
L_linkedList_35:
	DB	0xA,"  cx: ",0
L_linkedList_34:
	DB	0xA,"  bx: ",0
L_linkedList_33:
	DB	0xA,"  ax: ",0
L_linkedList_32:
	DB	0xA,"  ip: ",0
L_linkedList_31:
	DB	0xA,"  sp: ",0
	ALIGN	2
printContext:
	; >>>>> Line:	102
	; >>>>> { 
	jmp	L_linkedList_44
L_linkedList_45:
	; >>>>> Line:	103
	; >>>>> printString("\n  sp: "); 
	mov	ax, L_linkedList_31
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	104
	; >>>>> printInt(c.sp); 
	push	word [bp+4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	105
	; >>>>> printString("\n  ip: "); 
	mov	ax, L_linkedList_32
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	106
	; >>>>> printInt(c.ip); 
	push	word [bp+6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	120
	; >>>>> printString("\n  ax: "); 
	mov	ax, L_linkedList_33
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	121
	; >>>>> printInt(c.ax); 
	push	word [bp+8]
	call	printInt
	add	sp, 2
	; >>>>> Line:	122
	; >>>>> printString("\n  bx: "); 
	mov	ax, L_linkedList_34
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	123
	; >>>>> printInt(c.bx); 
	push	word [bp+10]
	call	printInt
	add	sp, 2
	; >>>>> Line:	124
	; >>>>> printString("\n  cx: "); 
	mov	ax, L_linkedList_35
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	125
	; >>>>> printInt(c.cx); 
	push	word [bp+12]
	call	printInt
	add	sp, 2
	; >>>>> Line:	126
	; >>>>> printString("\n  dx: "); 
	mov	ax, L_linkedList_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	127
	; >>>>> printInt(c.dx); 
	push	word [bp+14]
	call	printInt
	add	sp, 2
	; >>>>> Line:	128
	; >>>>> printString("\n  si: "); 
	mov	ax, L_linkedList_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	129
	; >>>>> printInt(c.si); 
	push	word [bp+16]
	call	printInt
	add	sp, 2
	; >>>>> Line:	130
	; >>>>> printString("\n  di: "); 
	mov	ax, L_linkedList_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printInt(c.di); 
	push	word [bp+18]
	call	printInt
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> printString("\n  bp: "); 
	mov	ax, L_linkedList_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	133
	; >>>>> printInt(c.bp); 
	push	word [bp+20]
	call	printInt
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> "); 
	mov	ax, L_linkedList_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printInt(c.es); 
	push	word [bp+22]
	call	printInt
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> printString("\n  ds: "); 
	mov	ax, L_linkedList_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	137
	; >>>>> printInt(c.ds); 
	push	word [bp+24]
	call	printInt
	add	sp, 2
	; >>>>> Line:	138
	; >>>>> printString("\n  flags: "); 
	mov	ax, L_linkedList_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	139
	; >>>>> printInt(c.flags); 
	push	word [bp+28]
	call	printInt
	add	sp, 2
	; >>>>> Line:	140
	; >>>>> printString("\n\n"); 
	mov	ax, L_linkedList_43
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_linkedList_44:
	push	bp
	mov	bp, sp
	jmp	L_linkedList_45
L_linkedList_56:
	DB	0xA," Event wait mode: ",0
L_linkedList_55:
	DB	0xA," Pending Event flags: ",0
L_linkedList_54:
	DB	0xA," Pending Event Group value: ",0
L_linkedList_53:
	DB	0xA," Pending Event Group: ",0
L_linkedList_52:
	DB	0xA," Pending Queue: ",0
L_linkedList_51:
	DB	0xA," Pending Sem value: ",0
L_linkedList_50:
	DB	0xA," Pending Sem: ",0
L_linkedList_49:
	DB	0xA,"  Delay: ",0
L_linkedList_48:
	DB	0xA,"  Priority: ",0
L_linkedList_47:
	DB	"  ID: ",0
	ALIGN	2
printTCB:
	; >>>>> Line:	145
	; >>>>> { 
	jmp	L_linkedList_57
L_linkedList_58:
	; >>>>> Line:	146
	; >>>>> printString("  ID: "); 
	mov	ax, L_linkedList_47
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	147
	; >>>>> printInt(t->ID); 
	mov	si, word [bp+4]
	add	si, 36
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	148
	; >>>>> printString("\n  Priority: "); 
	mov	ax, L_linkedList_48
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	149
	; >>>>> printInt(t->priority); 
	mov	si, word [bp+4]
	add	si, 28
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	150
	; >>>>> printString("\n  Delay: "); 
	mov	ax, L_linkedList_49
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	151
	; >>>>> printInt(t->delay); 
	mov	si, word [bp+4]
	add	si, 30
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	152
	; >>>>> printString("\n Pending Sem: "); 
	mov	ax, L_linkedList_50
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	153
	; >>>>> printWord((int) t->pendingSem); 
	mov	si, word [bp+4]
	add	si, 38
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	154
	; >>>>> printString("\n Pending Sem value: "); 
	mov	ax, L_linkedList_51
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	155
	; >>>>> printInt((t->pendingSem->value)); 
	mov	si, word [bp+4]
	add	si, 38
	mov	si, word [si]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	156
	; >>>>> printString("\n Pending Queue: "); 
	mov	ax, L_linkedList_52
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	157
	; >>>>> uns 
	mov	si, word [bp+4]
	add	si, 40
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	158
	; >>>>> printString("\n Pending Event Group: "); 
	mov	ax, L_linkedList_53
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	159
	; >>>>> printWord((int) t->pendingEventGroup); 
	mov	si, word [bp+4]
	add	si, 42
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	160
	; >>>>> printString("\n Pending Event Group value: "); 
	mov	ax, L_linkedList_54
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	161
	; >>>>> printInt((int) *(t->pendingEventGroup)); 
	mov	si, word [bp+4]
	add	si, 42
	mov	si, word [si]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	162
	; >>>>> printString("\n Pending Event flags: "); 
	mov	ax, L_linkedList_55
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	163
	; >>>>> printInt(t->pendingEventFlags); 
	mov	si, word [bp+4]
	add	si, 44
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	164
	; >>>>> printString("\n Event wait mode: "); 
	mov	ax, L_linkedList_56
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	165
	; >>>>> printInt(t->eventWaitMode); 
	mov	si, word [bp+4]
	add	si, 46
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	166
	; >>>>> printContext(t->context); 
	sub	sp, 26
	mov	di, sp
	mov	si, word [bp+4]
	mov	cx, 13
	rep
	movsw
	call	printContext
	add	sp, 26
	mov	sp, bp
	pop	bp
	ret
L_linkedList_57:
	push	bp
	mov	bp, sp
	jmp	L_linkedList_58
L_linkedList_60:
	DB	"TCB ",0
	ALIGN	2
printTCBs:
	; >>>>> Line:	176
	; >>>>> { 
	jmp	L_linkedList_61
L_linkedList_62:
	; >>>>> Line:	178
	; >>>>> for (i = 0; i < currentListSize; i++) 
	mov	word [bp-2], 0
	jmp	L_linkedList_64
L_linkedList_63:
	; >>>>> Line:	180
	; >>>>> printString("TCB "); 
	mov	ax, L_linkedList_60
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	181
	; >>>>> printInt(i); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	182
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	183
	; >>>>> printTCB(&TCBarray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	push	ax
	call	printTCB
	add	sp, 2
L_linkedList_66:
	inc	word [bp-2]
L_linkedList_64:
	mov	ax, word [L_linkedList_1]
	cmp	ax, word [bp-2]
	ja	L_linkedList_63
L_linkedList_65:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_61:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_62
L_linkedList_69:
	DB	"Suspended list: ",0xA,0
L_linkedList_68:
	DB	"Ready list: ",0xA,0
	ALIGN	2
printLists:
	; >>>>> Line:	187
	; >>>>> { 
	jmp	L_linkedList_70
L_linkedList_71:
	; >>>>> Line:	190
	; >>>>> printString("Ready list: \n"); 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	190
	; >>>>> printString("Ready list: \n"); 
	mov	ax, L_linkedList_68
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	191
	; >>>>> while (tmp != 0) 
	jmp	L_linkedList_73
L_linkedList_72:
	; >>>>> Line:	193
	; >>>>> printTCB(tmp); 
	push	word [bp-2]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	194
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_73:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_linkedList_72
L_linkedList_74:
	; >>>>> Line:	198
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	199
	; >>>>> printString("Suspended list: \n"); 
	mov	ax, L_linkedList_69
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	200
	; >>>>> while (tmp != 0) 
	jmp	L_linkedList_76
L_linkedList_75:
	; >>>>> Line:	202
	; >>>>> printTCB(tmp); 
	push	word [bp-2]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	203
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_76:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_linkedList_75
L_linkedList_77:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_70:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_71
	ALIGN	2
YKRdyList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
TCBarray:
	TIMES	288 db 0
runningTask:
	TIMES	2 db 0
pendingSem:
	TIMES	2 db 0
pendingQueue:
	TIMES	2 db 0
pendingEventGroup:
	TIMES	2 db 0
pendingEventFlags:
	TIMES	2 db 0
eventWaitMode:
	TIMES	2 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleCount:
	DW	0
running_flag:
	DW	0
ISRCallDepth:
	DW	0
lastRunTask:
	DW	0
YKCtxSwCount:
	DW	0
YKTickNum:
	DW	0
firstTime:
	DW	1
currentNumSemaphores:
	DW	0
currentNumQueues:
	DW	0
currentNumEvents:
	DW	0
initContext:
	DW	0,0,0,0,0
	DW	0,0,0,0,0
	DW	0,0,512
L_yakc_2:
	DB	0xA,"************* BEGIN ***************",0xA,0xA,0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	38
	; >>>>> { 
	jmp	L_yakc_3
L_yakc_4:
	; >>>>> Line:	39
	; >>>>> printString("\n************* BEGIN ***************\n\n"); 
	mov	ax, L_yakc_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	41
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	44
	; >>>>> YKNewTask(YKIdleTask, (void *) &IdleStk[256], 
	mov	al, 100
	push	ax
	mov	ax, (L_yakc_1+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	46
	; >>>>> lastRunTask = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [lastRunTask], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_3:
	push	bp
	mov	bp, sp
	jmp	L_yakc_4
L_yakc_6:
	DB	"Entering idle task",0xA,0xD,0
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	50
	; >>>>> { 
	jmp	L_yakc_7
L_yakc_8:
	; >>>>> Line:	51
	; >>>>> printString("Entering idle task\n\r"); 
	mov	ax, L_yakc_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	52
	; >>>>> while(1) 
	jmp	L_yakc_10
L_yakc_9:
	; >>>>> Line:	55
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	56
	; >>>>> tmp = YKIdleCount + 1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [bp-2], ax
	; >>>>> Line:	58
	; >>>>> YKIdleCount = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKIdleCount], ax
	; >>>>> Line:	59
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_10:
	jmp	L_yakc_9
L_yakc_11:
	mov	sp, bp
	pop	bp
	ret
L_yakc_7:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_8
	ALIGN	2
YKNewTask:
	; >>>>> Line:	69
	; >>>>> { 
	jmp	L_yakc_13
L_yakc_14:
	; >>>>> Line:	77
	; >>>>> newTCB = createTCB(taskStack, priority, initContext); 
	sub	sp, 26
	mov	di, sp
	mov	si, initContext
	mov	cx, 13
	rep
	movsw
	mov	al, byte [bp+8]
	xor	ah, ah
	push	ax
	push	word [bp+6]
	call	createTCB
	add	sp, 30
	mov	word [bp-2], ax
	; >>>>> Line:	79
	; >>>>> newTCB->context.sp = (int)(taskStack); 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	80
	; >>>>> newTCB->context.ip = (int)task; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	81
	; >>>>> newTCB->context.bp = (int)taskStack; 
	mov	si, word [bp-2]
	add	si, 16
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	82
	; >>>>> insertTCBIntoRdyList(newT 
	push	word [bp-2]
	call	insertTCBIntoRdyList
	add	sp, 2
	; >>>>> Line:	86
	; >>>>> if (running_flag) 
	mov	ax, word [running_flag]
	test	ax, ax
	je	L_yakc_15
	; >>>>> Line:	88
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_15:
	mov	sp, bp
	pop	bp
	ret
L_yakc_13:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_14
	ALIGN	2
YKRun:
	; >>>>> Line:	93
	; >>>>> { 
	jmp	L_yakc_17
L_yakc_18:
	; >>>>> Line:	96
	; >>>>> running_flag = 1; 
	mov	word [running_flag], 1
	; >>>>> Line:	99
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_17:
	push	bp
	mov	bp, sp
	jmp	L_yakc_18
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	103
	; >>>>> { 
	jmp	L_yakc_20
L_yakc_21:
	; >>>>> Line:	108
	; >>>>> if (count == 0) 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_22
	; >>>>> Line:	109
	; >>>>> return; 
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	114
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	115
	; >>>>> YKRdyList->delay = count; 
	mov	si, word [YKRdyList]
	add	si, 30
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	116
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	117
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	120
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_23:
	mov	sp, bp
	pop	bp
	ret
L_yakc_20:
	push	bp
	mov	bp, sp
	jmp	L_yakc_21
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	124
	; >>>>> { 
	jmp	L_yakc_25
L_yakc_26:
	; >>>>> Line:	128
	; >>>>> ISRCallDepth++; 
	inc	word [ISRCallDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_25:
	push	bp
	mov	bp, sp
	jmp	L_yakc_26
	ALIGN	2
YKExitISR:
	; >>>>> Line:	132
	; >>>>> { 
	jmp	L_yakc_28
L_yakc_29:
	; >>>>> Line:	136
	; >>>>> ISRCallDepth--; 
	dec	word [ISRCallDepth]
	; >>>>> Line:	137
	; >>>>> if (ISRCallDepth == 0) 
	mov	ax, word [ISRCallDepth]
	test	ax, ax
	jne	L_yakc_30
	; >>>>> Line:	138
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_30:
	mov	sp, bp
	pop	bp
	ret
L_yakc_28:
	push	bp
	mov	bp, sp
	jmp	L_yakc_29
	ALIGN	2
YKScheduler:
	; >>>>> Line:	142
	; >>>>> { 
	jmp	L_yakc_32
L_yakc_33:
	; >>>>> Line:	147
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	148
	; >>>>> if (firstTime) 
	mov	ax, word [firstTime]
	test	ax, ax
	je	L_yakc_34
	; >>>>> Line:	150
	; >>>>> firstTime = 0; 
	mov	word [firstTime], 0
	; >>>>> Line:	152
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	154
	; >>>>> YKFirstDispatcher(); 
	call	YKFirstDispatcher
	jmp	L_yakc_35
L_yakc_34:
	; >>>>> Line:	156
	; >>>>> else if (lastRunTask != YKRdyList) 
	mov	ax, word [YKRdyList]
	cmp	ax, word [lastRunTask]
	je	L_yakc_36
	; >>>>> Line:	159
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	161
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
L_yakc_36:
L_yakc_35:
	mov	sp, bp
	pop	bp
	ret
L_yakc_32:
	push	bp
	mov	bp, sp
	jmp	L_yakc_33
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	167
	; >>>>> { 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	176
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	178
	; >>>>> while(tmp != 0) 
	jmp	L_yakc_41
L_yakc_40:
	; >>>>> Line:	180
	; >>>>> if (tmp->delay > 0) 
	mov	si, word [bp-2]
	add	si, 30
	cmp	word [si], 0
	jle	L_yakc_43
	; >>>>> Line:	182
	; >>>>> (tmp->delay)--; 
	mov	si, word [bp-2]
	add	si, 30
	dec	word [si]
	; >>>>> Line:	183
	; >>>>> if (tmp->delay == 0) 
	mov	si, word [bp-2]
	add	si, 30
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_44
	; >>>>> Line:	185
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	186
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	188
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-4]
	call	moveTCBToRdyList
	add	sp, 2
	jmp	L_yakc_45
L_yakc_44:
	; >>>>> Line:	191
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_45:
	jmp	L_yakc_46
L_yakc_43:
	; >>>>> Line:	194
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_46:
L_yakc_41:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_40
L_yakc_42:
	; >>>>> Line:	196
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_39
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	201
	; >>>>> { 
	jmp	L_yakc_48
L_yakc_49:
	; >>>>> Line:	204
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	205
	; >>>>> sem = &(SemArray[currentNumSemaphores]); 
	mov	ax, word [currentNumSemaphores]
	shl	ax, 1
	add	ax, SemArray
	mov	word [bp-2], ax
	; >>>>> Line:	206
	; >>>>> sem->value = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	208
	; >>>>> currentNumSemaphores++; 
	inc	word [currentNumSemaphores]
	; >>>>> Line:	209
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	210
	; >>>>> return sem; 
	mov	ax, word [bp-2]
L_yakc_50:
	mov	sp, bp
	pop	bp
	ret
L_yakc_48:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_49
	ALIGN	2
YKSemPend:
	; >>>>> Line:	216
	; >>>>> { 
	jmp	L_yakc_52
L_yakc_53:
	; >>>>> Line:	217
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	223
	; >>>>> if (semaphore->value > 0) 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jle	L_yakc_54
	; >>>>> Line:	226
	; >>>>> (semaphore->value)--; 
	dec	word [si]
	jmp	L_yakc_55
L_yakc_54:
	; >>>>> Line:	232
	; >>>>> (semaphore->value)--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	233
	; >>>>> YKRdyList->pendingSem = semaphore; 
	mov	si, word [YKRdyList]
	add	si, 38
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	235
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	237
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_55:
	; >>>>> Line:	239
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_52:
	push	bp
	mov	bp, sp
	jmp	L_yakc_53
	ALIGN	2
YKSemPost:
	; >>>>> Line:	244
	; >>>>> { 
	jmp	L_yakc_57
L_yakc_58:
	; >>>>> Line:	247
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	249
	; >>>>> (semaphore->va 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	255
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	256
	; >>>>> while(tmp != 0) 
	jmp	L_yakc_60
L_yakc_59:
	; >>>>> Line:	259
	; >>>>> if (tmp->pendingSem == semaphore){ 
	mov	si, word [bp-2]
	add	si, 38
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_62
	; >>>>> Line:	260
	; >>>>> tmp->pendingSem = 0; 
	mov	si, word [bp-2]
	add	si, 38
	mov	word [si], 0
	; >>>>> Line:	261
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	262
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	263
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-4]
	call	moveTCBToRdyList
	add	sp, 2
	jmp	L_yakc_63
L_yakc_62:
	; >>>>> Line:	267
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_63:
L_yakc_60:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_59
L_yakc_61:
	; >>>>> Line:	270
	; >>>>> if (ISRCallDepth <= 0) 
	mov	ax, word [ISRCallDepth]
	test	ax, ax
	jne	L_yakc_64
	; >>>>> Line:	273
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_64:
L_yakc_65:
	; >>>>> Line:	280
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_57:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_58
	ALIGN	2
YKQCreate:
	; >>>>> Line:	284
	; >>>>> { 
	jmp	L_yakc_67
L_yakc_68:
	; >>>>> Line:	286
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	287
	; >>>>> queue = &(QueueArray[currentNumQueues]); 
	mov	ax, word [currentNumQueues]
	mov	cx, 3
	shl	ax, cl
	add	ax, QueueArray
	mov	word [bp-2], ax
	; >>>>> Line:	288
	; >>>>> currentNumQueues++; 
	inc	word [currentNumQueues]
	; >>>>> Line:	289
	; >>>>> queue->qArray = start; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	290
	; >>>>> queue->qStart = start; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	291
	; >>>>> queue->qEnd = start; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	292
	; >>>>> queue->qMaxSize = size; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	293
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	294
	; >>>>> return queue; 
	mov	ax, word [bp-2]
L_yakc_69:
	mov	sp, bp
	pop	bp
	ret
L_yakc_67:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_68
	ALIGN	2
YKQPend:
	; >>>>> Line:	299
	; >>>>> { 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	304
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	305
	; >>>>> if (qIsEmpty(queue)) 
	push	word [bp+4]
	call	qIsEmpty
	add	sp, 2
	test	ax, ax
	je	L_yakc_73
	; >>>>> Line:	308
	; >>>>> YKRdyList->pendingQueue = queue; 
	mov	si, word [YKRdyList]
	add	si, 40
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	309
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	310
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_73:
	; >>>>> Line:	315
	; >>>>> returnVal = qRemove(queue); 
	push	word [bp+4]
	call	qRemove
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	321
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	322
	; >>>>> return returnVal; 
	mov	ax, word [bp-2]
L_yakc_74:
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_72
	ALIGN	2
YKQPost:
	; >>>>> Line:	326
	; >>>>> { 
	jmp	L_yakc_76
L_yakc_77:
	; >>>>> Line:	332
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	333
	; >>>>> if (qIsFull(queue)) 
	push	word [bp+4]
	call	qIsFull
	add	sp, 2
	test	ax, ax
	je	L_yakc_78
	; >>>>> Line:	335
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	336
	; >>>>> { 
	xor	ax, ax
	jmp	L_yakc_79
	jmp	L_yakc_80
L_yakc_78:
	; >>>>> Line:	346
	; >>>>> qInsert(queue, msg); 
	push	word [bp+6]
	push	word [bp+4]
	call	qInsert
	add	sp, 4
	; >>>>> Line:	348
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	349
	; >>>>> while(tmp != 0) 
	jmp	L_yakc_82
L_yakc_81:
	; >>>>> Line:	351
	; >>>>> if (tmp->pendingQueue == queue) 
	mov	si, word [bp-2]
	add	si, 40
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_84
	; >>>>> Line:	353
	; >>>>> tmp->pendingQueue = 0; 
	mov	si, word [bp-2]
	add	si, 40
	mov	word [si], 0
	; >>>>> Line:	354
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	355
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	356
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-4]
	call	moveTCBToRdyList
	add	sp, 2
	jmp	L_yakc_85
L_yakc_84:
	; >>>>> Line:	360
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_85:
L_yakc_82:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_81
L_yakc_83:
	; >>>>> Line:	363
	; >>>>> if (ISRCallDepth <= 0) 
	mov	ax, word [ISRCallDepth]
	test	ax, ax
	jne	L_yakc_86
	; >>>>> Line:	366
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_86:
	; >>>>> Line:	368
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	369
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_80:
L_yakc_79:
	mov	sp, bp
	pop	bp
	ret
L_yakc_76:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_77
L_yakc_88:
	DB	"ERROR: MAXIMUM NUMBER OF EVENTS EXCEEDED",0
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	374
	; >>>>> { 
	jmp	L_yakc_89
L_yakc_90:
	; >>>>> Line:	377
	; >>>>> if (currentNumEvents > 2) 
	cmp	word [currentNumEvents], 2
	jbe	L_yakc_91
	; >>>>> Line:	379
	; >>>>> tMode = 
	mov	ax, L_yakc_88
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	380
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_92
L_yakc_91:
	; >>>>> Line:	383
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	384
	; >>>>> event = &(EventArray[currentNumEvents]); 
	mov	ax, word [currentNumEvents]
	shl	ax, 1
	add	ax, EventArray
	mov	word [bp-2], ax
	; >>>>> Line:	385
	; >>>>> *event = initialValue; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	386
	; >>>>> currentNumEvents++; 
	inc	word [currentNumEvents]
	; >>>>> Line:	387
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	388
	; >>>>> return event; 
	mov	ax, word [bp-2]
L_yakc_92:
	mov	sp, bp
	pop	bp
	ret
L_yakc_89:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_90
L_yakc_94:
	DB	0xA,0xD,"ERROR: INVALID WAIT MODE",0xA,0xD,0
	ALIGN	2
YKEventPend:
	; >>>>> Line:	392
	; >>>>> { 
	jmp	L_yakc_95
L_yakc_96:
	; >>>>> Line:	395
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	396
	; >>>>> switch (waitMode) { 
	mov	ax, word [bp+8]
	dec	ax
	je	L_yakc_99
	inc	ax
	je	L_yakc_100
	jmp	L_yakc_98
L_yakc_99:
	; >>>>> Line:	398
	; >>>>> if ((*event & eventMask) != eventMask) 
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	mov	dx, word [bp+6]
	cmp	dx, ax
	je	L_yakc_101
	; >>>>> Line:	402
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	403
	; >>>>> tmp->pendingEventGroup = event; 
	mov	si, word [bp-2]
	add	si, 42
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	404
	; >>>>> tmp->pendingEventFlags = eventMask; 
	mov	si, word [bp-2]
	add	si, 44
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	405
	; >>>>> tmp->eventWaitMode = 
	mov	si, word [bp-2]
	add	si, 46
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	407
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	408
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	409
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	413
	; >>>>> return *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_102
	jmp	L_yakc_103
L_yakc_101:
	; >>>>> Line:	422
	; >>>>> return *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_102
L_yakc_103:
	; >>>>> Line:	424
	; >>>>> break; 
	jmp	L_yakc_97
L_yakc_100:
	; >>>>> Line:	426
	; >>>>> if ((*event & eventMask) == 0) 
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	jne	L_yakc_104
	; >>>>> Line:	430
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	431
	; >>>>> tmp->pendingEventGroup = event; 
	mov	si, word [bp-2]
	add	si, 42
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	432
	; >>>>> tmp->pendingEventFlags = eventMask; 
	mov	si, word [bp-2]
	add	si, 44
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	433
	; >>>>> tmp->eventWaitMode = waitMode; 
	mov	si, word [bp-2]
	add	si, 46
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	434
	; >>>>> removeFirstTCBFromRdyList(); 
	call	removeFirstTCBFromRdyList
	; >>>>> Line:	435
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	436
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	440
	; >>>>> return *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_102
	jmp	L_yakc_105
L_yakc_104:
	; >>>>> Line:	449
	; >>>>> return *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_102
L_yakc_105:
	; >>>>> Line:	451
	; >>>>> break; 
	jmp	L_yakc_97
L_yakc_98:
	; >>>>> Line:	453
	; >>>>> if (t 
	mov	ax, L_yakc_94
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	454
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_102
L_yakc_97:
	; >>>>> Line:	458
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_102:
	mov	sp, bp
	pop	bp
	ret
L_yakc_95:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_96
L_yakc_107:
	DB	0xA,0xD,"----Calling Scheduler from YKEVentSet------",0xA,0xD,0
	ALIGN	2
YKEventSet:
	; >>>>> Line:	462
	; >>>>> { 
	jmp	L_yakc_108
L_yakc_109:
	; >>>>> Line:	470
	; >>>>> taskMadeReady = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	481
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	483
	; >>>>> curFlags = *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	484
	; >>>>> newFlags = (curFlags & ~eventMask) | (eventMask); 
	mov	ax, word [bp+6]
	not	ax
	and	ax, word [bp-4]
	or	ax, word [bp+6]
	mov	word [bp-6], ax
	; >>>>> Line:	485
	; >>>>> *event = newFlags; 
	mov	si, word [bp+4]
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	493
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-8], ax
	; >>>>> Line:	494
	; >>>>> while(tmp != 0) 
	jmp	L_yakc_111
L_yakc_110:
	; >>>>> Line:	496
	; >>>>> if ((tmp->pendingEventGroup == event) && (tmp->pendingEventGroup != 0)) 
	mov	si, word [bp-8]
	add	si, 42
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_113
	mov	si, word [bp-8]
	add	si, 42
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_113
	; >>>>> Line:	498
	; >>>>> if (t 
	mov	si, word [bp-8]
	add	si, 46
	cmp	word [si], 1
	jne	L_yakc_114
	; >>>>> Line:	500
	; >>>>> if ((*event & (tmp->pendingEventFlags)) == (tmp->pendingEventFlags)) 
	mov	si, word [bp-8]
	add	si, 44
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	si, word [bp-8]
	add	si, 44
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yakc_115
	; >>>>> Line:	502
	; >>>>> tmp->pendingEventGroup = 0; 
	mov	si, word [bp-8]
	add	si, 42
	mov	word [si], 0
	; >>>>> Line:	503
	; >>>>> tmp->pendingEventFlags = 0; 
	mov	si, word [bp-8]
	add	si, 44
	mov	word [si], 0
	; >>>>> Line:	504
	; >>>>> tmp->eventWaitMode = -1; 
	mov	si, word [bp-8]
	add	si, 46
	mov	word [si], -1
	; >>>>> Line:	505
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	506
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	509
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	510
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-10]
	call	moveTCBToRdyList
	add	sp, 2
	; >>>>> Line:	511
	; >>>>> taskMadeReady = 1; 
	mov	word [bp-2], 1
	jmp	L_yakc_116
L_yakc_115:
	; >>>>> Line:	515
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_116:
	jmp	L_yakc_117
L_yakc_114:
	; >>>>> Line:	520
	; >>>>> if ((*event & (tmp->pendingEventFlags)) != 0) 
	mov	si, word [bp-8]
	add	si, 44
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	je	L_yakc_118
	; >>>>> Line:	522
	; >>>>> tmp->pendingEve 
	mov	si, word [bp-8]
	add	si, 42
	mov	word [si], 0
	; >>>>> Line:	523
	; >>>>> tmp->pendingEventFlags = 0; 
	mov	si, word [bp-8]
	add	si, 44
	mov	word [si], 0
	; >>>>> Line:	524
	; >>>>> tmp->eventWaitMode = -1; 
	mov	si, word [bp-8]
	add	si, 46
	mov	word [si], -1
	; >>>>> Line:	525
	; >>>>> tmp2 = tmp; 
	mov	ax, word [bp-8]
	mov	word [bp-10], ax
	; >>>>> Line:	526
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	529
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	530
	; >>>>> moveTCBToRdyList(tmp2); 
	push	word [bp-10]
	call	moveTCBToRdyList
	add	sp, 2
	; >>>>> Line:	531
	; >>>>> taskMadeReady = 1; 
	mov	word [bp-2], 1
	jmp	L_yakc_119
L_yakc_118:
	; >>>>> Line:	535
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_119:
L_yakc_117:
	jmp	L_yakc_120
L_yakc_113:
	; >>>>> Line:	540
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_120:
L_yakc_111:
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_yakc_110
L_yakc_112:
	; >>>>> Line:	543
	; >>>>> if (taskMadeReady && (ISRCallDepth <= 0)) 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_yakc_121
	mov	ax, word [ISRCallDepth]
	test	ax, ax
	jne	L_yakc_121
	; >>>>> Line:	545
	; >>>>> printString("\n\r----Calling Scheduler from YKEVentSet------\n\r"); 
	mov	ax, L_yakc_107
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	546
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_121:
	; >>>>> Line:	548
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_108:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_yakc_109
	ALIGN	2
YKEventReset:
	; >>>>> Line:	552
	; >>>>> { 
	jmp	L_yakc_123
L_yakc_124:
	; >>>>> Line:	561
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	562
	; >>>>> curVal = *event; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	563
	; >>>>> newVal = (curVal & ~eventMask) | (0 & eventMask); 
	mov	ax, word [bp+6]
	not	ax
	and	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	567
	; >>>>> *event = newVal; 
	mov	si, word [bp+4]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	568
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_123:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_124
	ALIGN	2
L_yakc_1:
	TIMES	512 db 0
SemArray:
	TIMES	12 db 0
QueueArray:
	TIMES	24 db 0
EventArray:
	TIMES	4 db 0
YKEnterMutex:
  cli
  ret

YKExitMutex:
  sti
  ret

YKDispatcher:
  ;save context of current task into its TCB
  ;restore context of new task into registers
  ;restore ip of new task, which will send us to the new task


  ;cli     ;disable interrupts

  push bp
  push bx

  mov bx, [lastRunTask]

  mov [bx+4], ax
  mov [bx+8], cx
  mov [bx+10], dx

  mov [bx], sp
  mov [bx+12], si
  mov [bx+14], di


  mov [bx+18], es
  mov [bx+20], ds
  mov [bx+22], cs

  mov bp, bx
  pop bx
  mov [bp+6], bx
  mov bx, bp
  pop bp
  mov [bx+16], bp

  pushf
  pop ax
  mov [bx+24], ax

  pop ax
  mov [bx+2], ax ;this is the ip


  ;assign lastRunTask to the value of YKRdyList
  mov ax, [YKRdyList]
  mov [lastRunTask], ax

  ;restore the context of the new task into the registers
  ;this new task is at the top of YKRdyList

  mov bx, word[YKRdyList]

  mov sp, word [bx] ;sp
  mov ax, word[bx+4]
  mov cx, word[bx+8]
  mov dx, word[bx+10]

  mov di, word[bx+14]
  mov bp, word[bx+16]
  mov es, word[bx+18]
  mov ds, word[bx+20]


  mov si, [bx+24]
  push si                 ;pushes flags to the stack
  mov si, [bx+22]
  push si                 ;pushes cs to the stack
  mov si, [bx+2]
  push si                 ;pushes the ip onto the stack

  mov si, word[bx+12]
  mov bx, word[bx+6]
  sti
  iret  ;return using iret



;YKFirstDispatcher(): dispatches when you dont need to save context
; i.e. when YKRun calls the scheduler

YKFirstDispatcher:
  
  ;cli ;disable interrupts  

  ;assign lastRunTask to the value of YKRdyList
  mov ax, [YKRdyList]
  mov [lastRunTask], ax

  ;restore the context of the new task into the registers
  ;this new task is at the top of YKRdyList

  mov bx, word[YKRdyList]

  mov sp, word [bx] ;sp
  mov ax, word[bx+4]
  mov cx, word[bx+8]
  mov dx, word[bx+10]

  mov di, word[bx+14]
  mov bp, word[bx+16]
  mov es, word[bx+18]
  mov ds, word[bx+20]


  mov si, [bx+24]
  push si                 ;pushes flags to the stack
  mov si, [bx+22]
  push si                 ;pushes cs to the stack
  mov si, [bx+2]
  push si                 ;pushes the ip onto the stack

  mov si, word[bx+12]
  mov bx, word[bx+6]
  ;sti                   ;do we need to enable interrupts when the flags will essentially do that?
  iret  ;return using iret; Generated by c86 (BYU-NASM) 5.1 (beta) from queue.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
qIsEmpty:
	; >>>>> Line:	6
	; >>>>> { 
	jmp	L_queue_1
L_queue_2:
	; >>>>> Line:	7
	; >>>>> return (queue->qStart == queue->qEnd); 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	mov	ax, word [di]
	cmp	ax, word [si]
	je	L_queue_3
	xor	ax, ax
	jmp	L_queue_4
L_queue_3:
	mov	ax, 1
L_queue_4:
L_queue_5:
	mov	sp, bp
	pop	bp
	ret
L_queue_1:
	push	bp
	mov	bp, sp
	jmp	L_queue_2
	ALIGN	2
qIsFull:
	; >>>>> Line:	11
	; >>>>> { 
	jmp	L_queue_7
L_queue_8:
	; >>>>> Line:	12
	; >>>>> return (qNextInsertSpot(queue) == queue->qEnd); 
	push	word [bp+4]
	call	qNextInsertSpot
	add	sp, 2
	mov	si, word [bp+4]
	add	si, 2
	mov	dx, word [si]
	cmp	dx, ax
	je	L_queue_9
	xor	ax, ax
	jmp	L_queue_10
L_queue_9:
	mov	ax, 1
L_queue_10:
L_queue_11:
	mov	sp, bp
	pop	bp
	ret
L_queue_7:
	push	bp
	mov	bp, sp
	jmp	L_queue_8
	ALIGN	2
qNextInsertSpot:
	; >>>>> Line:	16
	; >>>>> { 
	jmp	L_queue_13
L_queue_14:
	; >>>>> Line:	18
	; >>>>> if (nextSlot > (queue->qArray + queue->qMaxSize - 1)) 
	mov	si, word [bp+4]
	mov	ax, word [si]
	add	ax, 2
	mov	word [bp-2], ax
	; >>>>> Line:	18
	; >>>>> if (nextSlot > (queue->qArray + queue->qMaxSize - 1)) 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, word [bp+4]
	add	si, 4
	add	ax, word [si]
	sub	ax, 2
	mov	dx, word [bp-2]
	cmp	dx, ax
	jbe	L_queue_15
	; >>>>> Line:	19
	; >>>>> nextSlot = queue->qArray; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_queue_15:
	; >>>>> Line:	20
	; >>>>> return nextSlot; 
	mov	ax, word [bp-2]
L_queue_16:
	mov	sp, bp
	pop	bp
	ret
L_queue_13:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_queue_14
	ALIGN	2
qNextRemoveSpot:
	; >>>>> Line:	24
	; >>>>> { 
	jmp	L_queue_18
L_queue_19:
	; >>>>> Line:	26
	; >>>>> if (nextSlot > (queue->qArray + queue->qMaxSize - 1)) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	add	ax, 2
	mov	word [bp-2], ax
	; >>>>> Line:	26
	; >>>>> if (nextSlot > (queue->qArray + queue->qMaxSize - 1)) 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, word [bp+4]
	add	si, 4
	add	ax, word [si]
	sub	ax, 2
	mov	dx, word [bp-2]
	cmp	dx, ax
	jbe	L_queue_20
	; >>>>> Line:	27
	; >>>>> nextSlot = queue->qArray; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_queue_20:
	; >>>>> Line:	28
	; >>>>> return nextSlot; 
	mov	ax, word [bp-2]
L_queue_21:
	mov	sp, bp
	pop	bp
	ret
L_queue_18:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_queue_19
	ALIGN	2
qInsert:
	; >>>>> Line:	32
	; >>>>> { 
	jmp	L_queue_23
L_queue_24:
	; >>>>> Line:	33
	; >>>>> *(queue->qStart) = eleme 
	mov	si, word [bp+4]
	mov	si, word [si]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	34
	; >>>>> queue->qStart = qNextInsertSpot(queue); 
	push	word [bp+4]
	call	qNextInsertSpot
	add	sp, 2
	mov	si, word [bp+4]
	mov	word [si], ax
	mov	sp, bp
	pop	bp
	ret
L_queue_23:
	push	bp
	mov	bp, sp
	jmp	L_queue_24
	ALIGN	2
qRemove:
	; >>>>> Line:	38
	; >>>>> { 
	jmp	L_queue_26
L_queue_27:
	; >>>>> Line:	40
	; >>>>> queue->qEnd = qNextRemoveSpot(queue); 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	40
	; >>>>> queue->qEnd = qNextRemoveSpot(queue); 
	push	word [bp+4]
	call	qNextRemoveSpot
	add	sp, 2
	mov	si, word [bp+4]
	add	si, 2
	mov	word [si], ax
	; >>>>> Line:	41
	; >>>>> return *temp; 
	mov	si, word [bp-2]
	mov	ax, word [si]
L_queue_28:
	mov	sp, bp
	pop	bp
	ret
L_queue_26:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_queue_27
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab8app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
