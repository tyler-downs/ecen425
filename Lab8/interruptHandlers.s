; Generated by c86 (BYU-NASM) 5.1 (beta) from interruptHandlers.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_interruptHandlers_2:
	DW	0
	ALIGN	2
resetInterruptHandler:
	; >>>>> Line:	14
	; >>>>> { 
	jmp	L_interruptHandlers_3
L_interruptHandlers_4:
	; >>>>> Line:	15
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_interruptHandlers_3:
	push	bp
	mov	bp, sp
	jmp	L_interruptHandlers_4
	ALIGN	2
tickInterruptHandler:
	; >>>>> Line:	19
	; >>>>> { 
	jmp	L_interruptHandlers_6
L_interruptHandlers_7:
	; >>>>> Line:	52
	; >>>>> YKTickHandler(); 
	call	YKTickHandler
	mov	sp, bp
	pop	bp
	ret
L_interruptHandlers_6:
	push	bp
	mov	bp, sp
	jmp	L_interruptHandlers_7
L_interruptHandlers_10:
	DB	") IGNORED",0xA,0
L_interruptHandlers_9:
	DB	0xA,"KEYPRESS (",0
	ALIGN	2
keyboardInterruptHandler:
	; >>>>> Line:	56
	; >>>>> { 
	jmp	L_interruptHandlers_11
L_interruptHandlers_12:
	; >>>>> Line:	58
	; >>>>> c = KeyBuffer; 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	60
	; >>>>> if(c == 'a') YKEventSet(charEvent, 0x1); 
	cmp	byte [bp-1], 97
	jne	L_interruptHandlers_13
	; >>>>> Line:	60
	; >>>>> if(c == 'a') YKEventSet(charEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_14
L_interruptHandlers_13:
	; >>>>> Line:	61
	; >>>>> else if(c == 'b') YKEventSet(charEvent, 0x2); 
	cmp	byte [bp-1], 98
	jne	L_interruptHandlers_15
	; >>>>> Line:	61
	; >>>>> else if(c == 'b') YKEventSet(charEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_16
L_interruptHandlers_15:
	; >>>>> Line:	62
	; >>>>> else if(c == 'c') YKEventSet(charEvent 
	cmp	byte [bp-1], 99
	jne	L_interruptHandlers_17
	; >>>>> Line:	62
	; >>>>> else if(c == 'c') YKEventSet(charEvent 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_18
L_interruptHandlers_17:
	; >>>>> Line:	63
	; >>>>> else if(c == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	cmp	byte [bp-1], 100
	jne	L_interruptHandlers_19
	; >>>>> Line:	63
	; >>>>> else if(c == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_20
L_interruptHandlers_19:
	; >>>>> Line:	64
	; >>>>> else if(c == '1') YKEventSet(numEvent, 0x1); 
	cmp	byte [bp-1], 49
	jne	L_interruptHandlers_21
	; >>>>> Line:	64
	; >>>>> else if(c == '1') YKEventSet(numEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_22
L_interruptHandlers_21:
	; >>>>> Line:	65
	; >>>>> else if(c == '2') YKEventSet(numEvent, 0x2); 
	cmp	byte [bp-1], 50
	jne	L_interruptHandlers_23
	; >>>>> Line:	65
	; >>>>> else if(c == '2') YKEventSet(numEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_24
L_interruptHandlers_23:
	; >>>>> Line:	66
	; >>>>> else if(c == '3') YKEventSet(numEvent, 0x4); 
	cmp	byte [bp-1], 51
	jne	L_interruptHandlers_25
	; >>>>> Line:	66
	; >>>>> else if(c == '3') YKEventSet(numEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_interruptHandlers_26
L_interruptHandlers_25:
	; >>>>> Line:	68
	; >>>>> print("\nKEYPRESS (", 11); 
	mov	ax, 11
	push	ax
	mov	ax, L_interruptHandlers_9
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	69
	; >>>>> printChar(c); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	70
	; >>>>> print(") IGNORED\n", 10); 
	mov	ax, 10
	push	ax
	mov	ax, L_interruptHandlers_10
	push	ax
	call	print
	add	sp, 4
L_interruptHandlers_26:
L_interruptHandlers_24:
L_interruptHandlers_22:
L_interruptHandlers_20:
L_interruptHandlers_18:
L_interruptHandlers_16:
L_interruptHandlers_14:
	mov	sp, bp
	pop	bp
	ret
L_interruptHandlers_11:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_interruptHandlers_12
	ALIGN	2
L_interruptHandlers_1:
	TIMES	512 db 0
