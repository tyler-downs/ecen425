; Generated by c86 (BYU-NASM) 5.1 (beta) from linkedList.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_linkedList_1:
	DW	0
	ALIGN	2
createTCB:
	; >>>>> Line:	14
	; >>>>> { 
	jmp	L_linkedList_2
L_linkedList_3:
	; >>>>> Line:	15
	; >>>>> TCBarray[currentListSize].stackptr = stackptr; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 26
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	16
	; >>>>> TCBarray[currentListSize].priority = priority; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 28
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	17
	; >>>>> TCBarray[currentListSize].context = context; 
	lea	ax, [bp+8]
	mov	word [bp-2], ax
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	word [bp-4], ax
	mov	di, word [bp-4]
	mov	si, word [bp-2]
	mov	cx, 13
	rep
	movsw
	; >>>>> Line:	18
	; >>>>> TCBarray[currentListSize].ID = currentListSize; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 36
	mov	ax, word [L_linkedList_1]
	mov	word [si], ax
	; >>>>> Line:	19
	; >>>>> TCBarray[currentListSize].pendingSem = 0; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 38
	mov	word [si], 0
	; >>>>> Line:	20
	; >>>>> TCBarray[currentListSize].pendingQueue = 0; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 40
	mov	word [si], 0
	; >>>>> Line:	21
	; >>>>> TCBarray[currentListSize].pendingEventGroup = 0; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 42
	mov	word [si], 0
	; >>>>> Line:	22
	; >>>>> TCBarray[currentListSize].pendingEventFlags = 0; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 44
	mov	word [si], 0
	; >>>>> Line:	23
	; >>>>> TCBarray[currentListSize].eventWaitMode = -1; 
	mov	ax, word [L_linkedList_1]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	mov	si, ax
	add	si, 46
	mov	word [si], -1
	; >>>>> Line:	24
	; >>>>> currentListSize++; 
	inc	word [L_linkedList_1]
	; >>>>> Line:	25
	; >>>>> return &(TCBarray[currentL 
	mov	ax, word [L_linkedList_1]
	dec	ax
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
L_linkedList_4:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_2:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_linkedList_3
	ALIGN	2
insertTCBIntoRdyList:
	; >>>>> Line:	29
	; >>>>> { 
	jmp	L_linkedList_6
L_linkedList_7:
	; >>>>> Line:	31
	; >>>>> if (YKRdyList == 0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_linkedList_8
	; >>>>> Line:	33
	; >>>>> YKRdyList = tcb; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	; >>>>> Line:	34
	; >>>>> tcb->next = 0; 
	mov	si, word [bp+4]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	35
	; >>>>> tcb->prev = 0; 
	mov	si, word [bp+4]
	add	si, 34
	mov	word [si], 0
	jmp	L_linkedList_9
L_linkedList_8:
	; >>>>> Line:	39
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	40
	; >>>>> while (tmp->priority < tcb->priority) 
	jmp	L_linkedList_11
L_linkedList_10:
	; >>>>> Line:	41
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_11:
	mov	si, word [bp-2]
	add	si, 28
	mov	di, word [bp+4]
	add	di, 28
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_linkedList_10
L_linkedList_12:
	; >>>>> Line:	42
	; >>>>> if (tmp->prev == 0) 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_13
	; >>>>> Line:	44
	; >>>>> YKRdyList = tcb; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	jmp	L_linkedList_14
L_linkedList_13:
	; >>>>> Line:	52
	; >>>>> tmp->prev->next = tcb; 
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_14:
	; >>>>> Line:	53
	; >>>>> tcb->prev = tmp->prev; 
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	54
	; >>>>> tcb->next = tmp; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	55
	; >>>>> tmp->prev = tcb; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_9:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_6:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_7
	ALIGN	2
removeFirstTCBFromRdyList:
	; >>>>> Line:	60
	; >>>>> { 
	jmp	L_linkedList_16
L_linkedList_17:
	; >>>>> Line:	62
	; >>>>> tmp = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	63
	; >>>>> YKRdyList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	64
	; >>>>> tmp->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 32
	mov	si, word [si]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	65
	; >>>>> tmp->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	66
	; >>>>> YKSuspList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	67
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	68
	; >>>>> if (tmp->next != 0) 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	je	L_linkedList_18
	; >>>>> Line:	69
	; >>>>> tmp->next->prev = tmp; 
	mov	si, word [bp-2]
	add	si, 32
	mov	si, word [si]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
L_linkedList_18:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_17
	ALIGN	2
moveTCBToRdyList:
	; >>>>> Line:	76
	; >>>>> { 
	jmp	L_linkedList_20
L_linkedList_21:
	; >>>>> Line:	79
	; >>>>> if (tmp->prev == 0) 
	mov	si, word [bp+4]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_22
	; >>>>> Line:	80
	; >>>>> YKSuspList = tmp->next; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [si]
	mov	word [YKSuspList], ax
	jmp	L_linkedList_23
L_linkedList_22:
	; >>>>> Line:	82
	; >>>>> tmp->prev->next = tmp->next; 
	mov	si, word [bp+4]
	add	si, 32
	mov	di, word [bp+4]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
L_linkedList_23:
	; >>>>> Line:	83
	; >>>>> if (tmp->next != 0) 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	je	L_linkedList_24
	; >>>>> Line:	84
	; >>>>> tmp->next->prev = tmp->prev; 
	mov	si, word [bp+4]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_linkedList_24:
	; >>>>> Line:	86
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	88
	; >>>>> while (tmp2->priority < tmp->priority) 
	jmp	L_linkedList_26
L_linkedList_25:
	; >>>>> Line:	89
	; >>>>> tmp2 = tmp2->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_26:
	mov	si, word [bp-2]
	add	si, 28
	mov	di, word [bp+4]
	add	di, 28
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_linkedList_25
L_linkedList_27:
	; >>>>> Line:	90
	; >>>>> if (tmp2->prev == 0) 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_linkedList_28
	; >>>>> Line:	91
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp+4]
	mov	word [YKRdyList], ax
	jmp	L_linkedList_29
L_linkedList_28:
	; >>>>> Line:	93
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	ax, word [bp+4]
	mov	word [si], ax
L_linkedList_29:
	; >>>>> Line:	94
	; >>>>> tmp->prev = tmp2- 
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp+4]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	95
	; >>>>> tmp->next = tmp2; 
	mov	si, word [bp+4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	96
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp+4]
	mov	word [si], ax
	mov	sp, bp
	pop	bp
	ret
L_linkedList_20:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_21
L_linkedList_43:
	DB	0xA,0xA,0
L_linkedList_42:
	DB	0xA,"  flags: ",0
L_linkedList_41:
	DB	0xA,"  ds: ",0
L_linkedList_40:
	DB	0xA,"  es: ",0
L_linkedList_39:
	DB	0xA,"  bp: ",0
L_linkedList_38:
	DB	0xA,"  di: ",0
L_linkedList_37:
	DB	0xA,"  si: ",0
L_linkedList_36:
	DB	0xA,"  dx: ",0
L_linkedList_35:
	DB	0xA,"  cx: ",0
L_linkedList_34:
	DB	0xA,"  bx: ",0
L_linkedList_33:
	DB	0xA,"  ax: ",0
L_linkedList_32:
	DB	0xA,"  ip: ",0
L_linkedList_31:
	DB	0xA,"  sp: ",0
	ALIGN	2
printContext:
	; >>>>> Line:	102
	; >>>>> { 
	jmp	L_linkedList_44
L_linkedList_45:
	; >>>>> Line:	103
	; >>>>> printString("\n  sp: "); 
	mov	ax, L_linkedList_31
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	104
	; >>>>> printInt(c.sp); 
	push	word [bp+4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	105
	; >>>>> printString("\n  ip: "); 
	mov	ax, L_linkedList_32
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	106
	; >>>>> printInt(c.ip); 
	push	word [bp+6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	120
	; >>>>> printString("\n  ax: "); 
	mov	ax, L_linkedList_33
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	121
	; >>>>> printInt(c.ax); 
	push	word [bp+8]
	call	printInt
	add	sp, 2
	; >>>>> Line:	122
	; >>>>> printString("\n  bx: "); 
	mov	ax, L_linkedList_34
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	123
	; >>>>> printInt(c.bx); 
	push	word [bp+10]
	call	printInt
	add	sp, 2
	; >>>>> Line:	124
	; >>>>> printString("\n  cx: "); 
	mov	ax, L_linkedList_35
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	125
	; >>>>> printInt(c.cx); 
	push	word [bp+12]
	call	printInt
	add	sp, 2
	; >>>>> Line:	126
	; >>>>> printString("\n  dx: "); 
	mov	ax, L_linkedList_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	127
	; >>>>> printInt(c.dx); 
	push	word [bp+14]
	call	printInt
	add	sp, 2
	; >>>>> Line:	128
	; >>>>> printString("\n  si: "); 
	mov	ax, L_linkedList_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	129
	; >>>>> printInt(c.si); 
	push	word [bp+16]
	call	printInt
	add	sp, 2
	; >>>>> Line:	130
	; >>>>> printString("\n  di: "); 
	mov	ax, L_linkedList_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printInt(c.di); 
	push	word [bp+18]
	call	printInt
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> printString("\n  bp: "); 
	mov	ax, L_linkedList_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	133
	; >>>>> printInt(c.bp); 
	push	word [bp+20]
	call	printInt
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> "); 
	mov	ax, L_linkedList_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printInt(c.es); 
	push	word [bp+22]
	call	printInt
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> printString("\n  ds: "); 
	mov	ax, L_linkedList_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	137
	; >>>>> printInt(c.ds); 
	push	word [bp+24]
	call	printInt
	add	sp, 2
	; >>>>> Line:	138
	; >>>>> printString("\n  flags: "); 
	mov	ax, L_linkedList_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	139
	; >>>>> printInt(c.flags); 
	push	word [bp+28]
	call	printInt
	add	sp, 2
	; >>>>> Line:	140
	; >>>>> printString("\n\n"); 
	mov	ax, L_linkedList_43
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_linkedList_44:
	push	bp
	mov	bp, sp
	jmp	L_linkedList_45
L_linkedList_56:
	DB	0xA," Event wait mode: ",0
L_linkedList_55:
	DB	0xA," Pending Event flags: ",0
L_linkedList_54:
	DB	0xA," Pending Event Group value: ",0
L_linkedList_53:
	DB	0xA," Pending Event Group: ",0
L_linkedList_52:
	DB	0xA," Pending Queue: ",0
L_linkedList_51:
	DB	0xA," Pending Sem value: ",0
L_linkedList_50:
	DB	0xA," Pending Sem: ",0
L_linkedList_49:
	DB	0xA,"  Delay: ",0
L_linkedList_48:
	DB	0xA,"  Priority: ",0
L_linkedList_47:
	DB	"  ID: ",0
	ALIGN	2
printTCB:
	; >>>>> Line:	145
	; >>>>> { 
	jmp	L_linkedList_57
L_linkedList_58:
	; >>>>> Line:	146
	; >>>>> printString("  ID: "); 
	mov	ax, L_linkedList_47
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	147
	; >>>>> printInt(t->ID); 
	mov	si, word [bp+4]
	add	si, 36
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	148
	; >>>>> printString("\n  Priority: "); 
	mov	ax, L_linkedList_48
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	149
	; >>>>> printInt(t->priority); 
	mov	si, word [bp+4]
	add	si, 28
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	150
	; >>>>> printString("\n  Delay: "); 
	mov	ax, L_linkedList_49
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	151
	; >>>>> printInt(t->delay); 
	mov	si, word [bp+4]
	add	si, 30
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	152
	; >>>>> printString("\n Pending Sem: "); 
	mov	ax, L_linkedList_50
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	153
	; >>>>> printWord((int) t->pendingSem); 
	mov	si, word [bp+4]
	add	si, 38
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	154
	; >>>>> printString("\n Pending Sem value: "); 
	mov	ax, L_linkedList_51
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	155
	; >>>>> printInt((t->pendingSem->value)); 
	mov	si, word [bp+4]
	add	si, 38
	mov	si, word [si]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	156
	; >>>>> printString("\n Pending Queue: "); 
	mov	ax, L_linkedList_52
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	157
	; >>>>> uns 
	mov	si, word [bp+4]
	add	si, 40
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	158
	; >>>>> printString("\n Pending Event Group: "); 
	mov	ax, L_linkedList_53
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	159
	; >>>>> printWord((int) t->pendingEventGroup); 
	mov	si, word [bp+4]
	add	si, 42
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	160
	; >>>>> printString("\n Pending Event Group value: "); 
	mov	ax, L_linkedList_54
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	161
	; >>>>> printInt((int) *(t->pendingEventGroup)); 
	mov	si, word [bp+4]
	add	si, 42
	mov	si, word [si]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	162
	; >>>>> printString("\n Pending Event flags: "); 
	mov	ax, L_linkedList_55
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	163
	; >>>>> printInt(t->pendingEventFlags); 
	mov	si, word [bp+4]
	add	si, 44
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	164
	; >>>>> printString("\n Event wait mode: "); 
	mov	ax, L_linkedList_56
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	165
	; >>>>> printInt(t->eventWaitMode); 
	mov	si, word [bp+4]
	add	si, 46
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	166
	; >>>>> printContext(t->context); 
	sub	sp, 26
	mov	di, sp
	mov	si, word [bp+4]
	mov	cx, 13
	rep
	movsw
	call	printContext
	add	sp, 26
	mov	sp, bp
	pop	bp
	ret
L_linkedList_57:
	push	bp
	mov	bp, sp
	jmp	L_linkedList_58
L_linkedList_60:
	DB	"TCB ",0
	ALIGN	2
printTCBs:
	; >>>>> Line:	176
	; >>>>> { 
	jmp	L_linkedList_61
L_linkedList_62:
	; >>>>> Line:	178
	; >>>>> for (i = 0; i < currentListSize; i++) 
	mov	word [bp-2], 0
	jmp	L_linkedList_64
L_linkedList_63:
	; >>>>> Line:	180
	; >>>>> printString("TCB "); 
	mov	ax, L_linkedList_60
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	181
	; >>>>> printInt(i); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	182
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	183
	; >>>>> printTCB(&TCBarray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 48
	imul	cx
	add	ax, TCBarray
	push	ax
	call	printTCB
	add	sp, 2
L_linkedList_66:
	inc	word [bp-2]
L_linkedList_64:
	mov	ax, word [L_linkedList_1]
	cmp	ax, word [bp-2]
	ja	L_linkedList_63
L_linkedList_65:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_61:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_62
L_linkedList_69:
	DB	"Suspended list: ",0xA,0
L_linkedList_68:
	DB	"Ready list: ",0xA,0
	ALIGN	2
printLists:
	; >>>>> Line:	187
	; >>>>> { 
	jmp	L_linkedList_70
L_linkedList_71:
	; >>>>> Line:	190
	; >>>>> printString("Ready list: \n"); 
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	190
	; >>>>> printString("Ready list: \n"); 
	mov	ax, L_linkedList_68
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	191
	; >>>>> while (tmp != 0) 
	jmp	L_linkedList_73
L_linkedList_72:
	; >>>>> Line:	193
	; >>>>> printTCB(tmp); 
	push	word [bp-2]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	194
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_73:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_linkedList_72
L_linkedList_74:
	; >>>>> Line:	198
	; >>>>> tmp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	199
	; >>>>> printString("Suspended list: \n"); 
	mov	ax, L_linkedList_69
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	200
	; >>>>> while (tmp != 0) 
	jmp	L_linkedList_76
L_linkedList_75:
	; >>>>> Line:	202
	; >>>>> printTCB(tmp); 
	push	word [bp-2]
	call	printTCB
	add	sp, 2
	; >>>>> Line:	203
	; >>>>> tmp = tmp->next; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_linkedList_76:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_linkedList_75
L_linkedList_77:
	mov	sp, bp
	pop	bp
	ret
L_linkedList_70:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_linkedList_71
	ALIGN	2
YKRdyList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
TCBarray:
	TIMES	288 db 0
runningTask:
	TIMES	2 db 0
pendingSem:
	TIMES	2 db 0
pendingQueue:
	TIMES	2 db 0
pendingEventGroup:
	TIMES	2 db 0
pendingEventFlags:
	TIMES	2 db 0
eventWaitMode:
	TIMES	2 db 0
